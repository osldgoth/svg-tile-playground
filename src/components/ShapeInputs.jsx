import { useContext, useEffect} from 'react';
import { Context } from './SVGContext';
import PropTypes from 'prop-types';


const basicShapeConfig = {
  RECT: {
    parameters: [
      { parameter: "x", label: "X Coordinate", reqired: "true" },
      { parameter: "y", label: "Y Coordinate" }, //reqired: "true"
      { parameter: "height", label: "Height" }, //reqired: "true"
      { parameter: "width", label: "Width" }, //reqired: "true"
      { parameter: "rx", label: "X Radius", reqired: "false" },
      { parameter: "ry", label: "Y Radius" }, //reqired: "false"
    ],
    defaultShape: { x: 33, y: 79, height: 144, width: 186, rx: 206, ry: 26 }
  },
  CIRCLE: {
    parameters: [
      { parameter: "r", label: "Radius" }, //reqired: "true"
      { parameter: "cx", label: "Center X" }, //reqired: "true"
      { parameter: "cy", label: "Center Y" }, //reqired: "true"
    ],
    defaultShape: { r: 50, cx: 124, cy: 99 }
  },
  ELLIPSE: {
    parameters: [
      { parameter: "rx", label: "Radius X" }, //reqired: "true"
      { parameter: "ry", label: "Radius Y" }, //reqired: "true"
      { parameter: "cx", label: "Center X" }, //reqired: "true"
      { parameter: "cy", label: "Center Y" }, //reqired: "true"
    ],
    defaultShape: { rx: 163, ry: 43, cx: 210, cy: 205 }
  },
  LINE: {
    parameters: [
      { parameter: "x1", label: "X1" }, //reqired: "true"
      { parameter: "y1", label: "Y1" }, //reqired: "true"
      { parameter: "x2", label: "X2" }, //reqired: "true"
      { parameter: "y2", label: "Y2" }, //reqired: "true"
    ],
    defaultShape: { x1: 91, y1: 181, x2: 287, y2: 100 }
  }
};

const advancedShapeConfig = {
  POLYLINE: [
    { 
      attribute: "points",
      label: "A list of points.",
      parameters: [
        { parameter: 'x', label: "X Coordinate" },
        { parameter: 'y', label: "Y Coordinate" }
      ],
      defaultShape: {points: '60, 110 65, 120 70, 115 75, 130 80, 125 85, 140 90, 135 95, 150 100, 145'}
    }
  ],
  POLYGON: [
    { 
      attribute: "points",
      label: "A list of points.",
      parameters: [
        { parameter: 'x', label: "X Coordinate" },
        { parameter: 'y', label: "Y Coordinate" }
      ],
      defaultShape: {points: '50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180'}
    }
  ],
  PATH: [
    { 
      attribute: "d",
      label: "Path Data.",
      commands: [ 
        {
          command: 'M', 
          name: "Move",
          parameters: [
            { parameter: 'x', label: "X Coordinate" },
            { parameter: 'y', label: "Y Coordinate" }
          ]
        },
        {
          command: 'L', 
          name: "Line To",
          parameters: [
            { parameter:  'x', label: "X Coordinate" },
            { parameter:  'y', label: "Y Coordinate" }
          ]
        },
        {
          command: 'H', 
          name: "Horizontal line",
          parameters: [
            { parameter: 'x', label: "X Coordinate" }
          ]
        },
        {
          command: 'V', 
          name: "Vertical line",
          parameters: [
            { parameter: 'y', label: "Y Coordinate" }
          ]
        },
        {
          command: 'C', 
          name: "Cubic Béziers",
          parameters: [
            { parameter: 'x1', label: "X1" },
            { parameter: 'y1', label: "Y1" },
            { parameter: 'x2', label: "X2" },
            { parameter: 'y2', label: "Y2" },
            { parameter: 'x', label: "X Coordinate" },
            { parameter: 'y', label: "Y Coordinate" }
          ]
        },
        {
          command: 'S', 
          name: "Smooth Cubic Béziers",
          parameters: [
            { parameter: 'x2', label: "X2" },
            { parameter: 'y2', label: "Y2" },
            { parameter: 'x', label: "X Coordinate" },
            { parameter: 'y', label: "Y Coordinate" }
          ]
        },
        {
          command: 'Q', 
          name: "Quadratic Bézier",
          parameters: [
            { parameter: 'x1', label: "X1" },
            { parameter: 'y1', label: "Y1" },
            { parameter: 'x', label: "X Coordinate" },
            { parameter: 'y', label: "Y Coordinate" }
          ]
        },
        {
          command: 'T', 
          name: "Smooth Quadratic Bézier",
          parameters: [
            { parameter: 'x', label: "X Coordinate" },
            { parameter: 'y', label: "Y Coordinate" }
          ]
        },
        {
          command: 'A', 
          name: "Arc",
          parameters: [
            { parameter: 'rx', label: "Radius X"}, 
            { parameter: 'ry', label: "Radius Y"},
            { parameter: 'x-axis-rotation', label: "X Axis Rotation"},
            { parameter: 'x', label: "X Coordinate"},
            { parameter: 'y', label: "Y Coordinate"}
          ], 
          flags: [
            { flag: 'large-arc-flag', label: "Large Arc Flag"},
            { flag: 'sweep-flag', label: "Sweep Flag"}
          ]
        },
        {
          command: 'Z', 
          name: "Close Path",
          parameters: [
            {parameter: 'x', label: 'Return to start X'},
            {parameter: 'y', label: 'Return to start Y'}
          ]
        }
      ],
      defaultShape: {d: 'M 10 315 L 110 215 A 30 50 0 0 1 162.55 162.45 L 172.55 152.45 A 30 50 -45 0 1 215.1 109.9 L 315 10'},
      eggs: {
        'MI': {
          d: 
          'M 113.248 17.414 C 108.160 19.832, 107.864 19.860, 103.748 18.309 C 97.007 15.768, 84.602 16.012, 78.500 18.806 C 72.516 21.546, 65.831 27.834, 63.562 32.856 C 62.282 35.687, 60.195 37.482, 54.208 40.899 C 37.530 50.418, 27.397 60.359, 20.799 73.673 C 16.863 81.618, 16.534 82.912, 16.173 91.902 C 15.839 100.228, 16.127 102.564, 18.240 108.641 C 27.968 136.613, 63.418 158.496, 108.788 164.535 C 122.695 166.386, 147.707 166.359, 161 164.477 C 189.767 160.406, 214.374 150.403, 231.992 135.620 C 238.930 129.798, 241.096 126.833, 236.750 129.107 C 235.512 129.754, 232.601 132.017, 230.279 134.136 C 222.713 141.041, 209.596 148.534, 196.351 153.520 C 167.217 164.486, 128.034 166.979, 95.500 159.936 C 63.141 152.932, 37.795 137.972, 25.624 118.693 C 20.855 111.139, 18.882 105.422, 18.272 97.391 C 17.242 83.819, 22.751 70.331, 33.999 58.884 C 40.526 52.242, 52 44.077, 59.584 40.677 C 62.509 39.366, 63.988 37.923, 64.849 35.541 C 66.783 30.192, 73.370 23.519, 79.212 20.990 C 86.020 18.043, 96.328 17.939, 103.403 20.744 L 108.305 22.689 112.903 20.094 C 116.801 17.895, 118.730 17.500, 125.588 17.500 C 132.976 17.500, 134.130 17.782, 138.911 20.754 C 143.307 23.487, 145.693 24.176, 153.822 25.061 C 166.652 26.459, 180.794 29.361, 189.925 32.471 C 197.765 35.141, 200.486 35.596, 199.549 34.079 C 197.845 31.321, 172.227 24.902, 155.123 22.946 C 146.436 21.953, 143.926 21.250, 139.713 18.630 C 135.329 15.904, 133.636 15.462, 126.590 15.209 C 119.664 14.960, 117.744 15.277, 113.248 17.414 M 117.359 28.923 C 115.632 29.976, 113.918 31.324, 113.550 31.919 C 112.478 33.654, 106.981 33.169, 102.360 30.932 C 95.618 27.669, 88.400 27.387, 83.059 30.179 C 77.266 33.206, 74.964 36.527, 74.158 43.019 L 73.500 48.313 68 50.152 C 60.834 52.548, 56.573 57.025, 57.306 61.387 C 57.594 63.099, 58.118 65.226, 58.470 66.113 C 58.975 67.389, 58.247 67.865, 54.986 68.386 C 52.563 68.774, 49.811 70.098, 48.310 71.599 C 46.135 73.774, 45.840 74.770, 46.315 78.326 C 46.621 80.622, 47.157 83.430, 47.505 84.566 C 48.005 86.200, 47.270 87.234, 43.999 89.501 C 35.292 95.535, 35.174 101.305, 43.588 109.718 C 46.529 112.660, 49.799 117.019, 50.855 119.405 C 56.537 132.250, 73.280 142.155, 92.500 144.043 C 96.900 144.476, 102.961 145.543, 105.968 146.415 C 116.124 149.359, 142.629 147.589, 145.423 143.779 C 146.205 142.713, 149.434 142.160, 157.207 141.765 C 165.226 141.357, 169.009 140.690, 172.273 139.110 C 175.043 137.769, 178.582 137, 181.984 137 C 190.375 137, 199.704 135.011, 203.547 132.404 C 206.795 130.200, 207.914 130.035, 218.281 130.236 C 227.825 130.422, 230.179 130.143, 234.051 128.371 C 250.272 120.947, 257.527 100.609, 251.362 79.846 C 249.918 74.984, 249.944 74.799, 252.947 68.791 C 254.626 65.430, 256.016 61.740, 256.035 60.590 C 256.055 59.441, 256.714 57.375, 257.500 56 C 259.214 53.002, 259.413 47.640, 257.914 44.840 C 257.317 43.725, 254.853 41.938, 252.437 40.869 C 249.974 39.780, 246.851 37.296, 245.324 35.213 C 243.827 33.171, 241.680 30.723, 240.551 29.772 C 237.944 27.576, 232.015 27.521, 227.218 29.649 C 224.798 30.722, 221.350 31.216, 217.340 31.062 C 210.450 30.799, 204.040 33.061, 198 37.888 C 192.205 42.519, 188.197 43.312, 173.605 42.714 C 151.306 41.801, 149.311 41.158, 134.972 30.250 C 131.442 27.565, 129.814 27.001, 125.600 27.004 C 122.341 27.006, 119.366 27.699, 117.359 28.923 M 121.352 30.993 C 118.887 31.988, 117.327 34, 119.020 34 C 119.647 34, 123.037 35.151, 126.555 36.559 C 130.816 38.263, 134.377 39.014, 137.225 38.809 L 141.500 38.500 135.136 34.250 C 128.809 30.024, 125.621 29.271, 121.352 30.993 M 231.299 32.116 C 229.539 32.620, 227.865 33.409, 227.580 33.871 C 227.294 34.333, 228.657 36.576, 230.608 38.855 C 233.444 42.168, 234.821 43, 237.471 43 C 239.624 43, 241.007 43.576, 241.417 44.643 C 242.283 46.902, 242.107 46.933, 236.985 45.415 C 234.502 44.679, 230.143 42.090, 227.299 39.663 C 224.455 37.235, 220.958 34.955, 219.527 34.596 C 214.017 33.213, 203.435 37.667, 196.108 44.453 C 191.632 48.598, 187.983 51.028, 186.316 50.973 C 185.867 50.958, 186.981 49.717, 188.792 48.215 L 192.084 45.483 180.698 45.845 C 173.112 46.085, 166.171 45.659, 159.906 44.568 C 154.733 43.667, 146 42.674, 140.500 42.361 C 133.658 41.972, 128.605 41.074, 124.500 39.516 C 118.260 37.149, 110 35.663, 110 36.908 C 110 37.851, 114.646 42.092, 118.808 44.948 C 120.627 46.197, 121.906 47.427, 121.651 47.683 C 120.804 48.530, 114.577 44.808, 109.162 40.219 C 106.225 37.730, 102.193 34.863, 100.200 33.847 C 93.025 30.189, 82.419 32.356, 79.456 38.085 C 77.746 41.391, 77.536 49.265, 79.081 52.151 C 80.392 54.602, 79.574 55.721, 77.642 54.118 C 76.498 53.169, 75.935 53.704, 74.618 56.996 C 72.520 62.241, 72.577 63.740, 75.050 68.355 C 77.048 72.082, 76.435 72.351, 72.876 69.307 C 71.448 68.085, 70.597 68.516, 65.833 72.869 C 62.853 75.593, 59.212 80.033, 57.740 82.736 C 51.680 93.871, 50.239 108.700, 54.363 117.500 C 61.095 131.866, 83.709 142.751, 101.188 140.039 C 110.493 138.595, 120.080 135.324, 126.715 131.329 L 132.242 128 145.871 127.973 C 153.367 127.958, 163.602 127.549, 168.615 127.063 C 173.629 126.578, 188.446 126.532, 201.545 126.960 C 214.644 127.389, 226.757 127.354, 228.465 126.882 C 233.832 125.400, 240.916 120.243, 242.687 116.529 C 243.606 114.602, 244.042 112.709, 243.655 112.322 C 243.268 111.935, 240.189 112.613, 236.812 113.828 C 227.510 117.175, 209.507 118.685, 196.389 117.219 C 187.132 116.185, 184.122 115.319, 172.678 110.399 C 160.027 104.960, 159.325 104.780, 152.471 105.220 C 145.941 105.639, 144.429 106.209, 133.651 112.309 C 127.206 115.956, 120.235 119.398, 118.161 119.957 C 113.625 121.178, 109.121 120.089, 104.647 116.689 C 99.092 112.466, 94.919 110.835, 89.548 110.787 C 83.207 110.730, 77.885 112.364, 75.373 115.140 C 74.346 116.276, 72.333 117.811, 70.901 118.551 C 67.904 120.101, 66.023 118.958, 65.965 115.550 C 65.945 114.422, 65.286 112.375, 64.500 111 C 61.395 105.568, 62.932 97.069, 68.343 89.750 C 71.819 85.048, 72.169 86.723, 69.014 92.971 C 65.578 99.779, 65.325 102.666, 67.636 108.717 C 69.473 113.528, 69.885 113.723, 72.951 111.241 C 74.845 109.707, 75.147 108.376, 75.311 100.832 C 75.487 92.779, 75.715 91.915, 78.606 88.340 C 85.569 79.732, 94.413 78.304, 109.802 83.303 C 119.166 86.345, 127.518 86.787, 133.796 84.572 C 136.022 83.787, 142.941 79.954, 149.172 76.054 C 164.128 66.694, 166.132 66.187, 176.986 69.014 C 190.119 72.435, 194.107 73.070, 197.952 72.354 C 199.903 71.991, 207.784 68.591, 215.464 64.799 L 229.429 57.905 238.626 58.125 C 248.668 58.365, 252.068 57.140, 254.172 52.521 C 256.080 48.335, 254.432 45.261, 248.480 41.902 C 245.466 40.201, 242.998 38.515, 242.995 38.155 C 242.984 36.726, 238.382 32.144, 236.500 31.687 C 235.400 31.420, 233.060 31.613, 231.299 32.116 M 143 34.385 C 143 35.905, 149.545 38.402, 156.470 39.523 C 167.531 41.313, 184.954 42.399, 183 41.176 C 180.503 39.614, 164.110 36.179, 153.789 35.056 C 142.730 33.853, 143 33.870, 143 34.385 M 91.465 40.961 C 90.346 41.409, 88.780 42.560, 87.985 43.518 C 86.653 45.124, 86.773 45.209, 89.520 44.604 L 92.500 43.947 92.163 49.932 C 91.864 55.247, 92.111 56.202, 94.368 58.459 C 95.766 59.856, 97.830 61, 98.955 61 C 100.080 61, 101 61.402, 101 61.893 C 101 63.111, 98.433 64, 94.918 64 C 93.313 64, 92 64.513, 92 65.140 C 92 66.706, 101.882 65.630, 105.720 63.645 C 107.340 62.807, 110.583 60.520, 112.927 58.561 C 115.271 56.602, 117.822 55, 118.595 55 C 119.368 55, 120 54.541, 120 53.981 C 120 53.399, 118.950 53.225, 117.553 53.576 C 113.398 54.619, 107.879 52.007, 102.547 46.473 C 97.156 40.878, 94.710 39.661, 91.465 40.961 M 208.635 46.073 C 202.976 50.524, 207.034 52.902, 212.901 48.573 L 216.191 46.146 219.346 48.069 C 221.081 49.127, 223.850 49.954, 225.500 49.906 L 228.500 49.820 225.419 48.925 C 223.724 48.433, 221.517 47.123, 220.514 46.015 C 218.063 43.307, 212.114 43.336, 208.635 46.073 M 94.474 50.120 C 93.073 56.497, 100.011 61.276, 106.646 58.504 C 110.623 56.842, 110.868 55.716, 107.576 54.217 C 105.671 53.349, 104.895 53.421, 103.953 54.556 C 103.294 55.350, 101.885 56, 100.821 56 C 99.027 56, 98.999 55.840, 100.428 53.799 C 101.850 51.769, 101.802 51.418, 99.811 49.299 C 96.870 46.169, 95.288 46.412, 94.474 50.120 M 68.030 53.629 C 60.968 56.599, 59.435 60.072, 62.536 66.069 C 64.051 69, 64.104 69.016, 66.504 67.270 C 68.053 66.143, 68.949 64.489, 68.969 62.718 C 68.986 61.188, 69.681 58.306, 70.513 56.314 C 71.345 54.323, 71.908 52.575, 71.763 52.431 C 71.618 52.287, 69.938 52.826, 68.030 53.629 M 52 57.345 C 43.408 64.131, 37.152 71.455, 33.696 78.777 C 30.907 84.685, 30.521 86.537, 30.511 94.052 C 30.501 101.932, 30.795 103.201, 34.256 110.204 C 44 129.918, 70.388 145.246, 105.500 151.586 C 119.033 154.030, 149.517 154.113, 163.012 151.743 C 174.875 149.660, 188.384 145.782, 197.099 141.957 C 205.323 138.347, 215 132.851, 215 131.789 C 215 130.009, 208.214 131.129, 205.107 133.421 C 201.214 136.293, 194.787 137.967, 183.652 139.010 C 179.168 139.430, 173.536 140.515, 171.136 141.421 C 168.736 142.327, 162.436 143.338, 157.136 143.667 C 150.962 144.051, 146.906 144.781, 145.848 145.699 C 143.616 147.636, 130.206 149.927, 121 149.944 C 116.875 149.952, 110.575 149.268, 107 148.423 C 103.425 147.579, 96.910 146.466, 92.522 145.949 C 73.247 143.679, 56.194 133.792, 49.874 121.223 C 48.569 118.625, 45.140 113.949, 42.256 110.830 C 39.371 107.712, 36.545 103.935, 35.976 102.436 C 34.425 98.358, 36.423 93.649, 41.569 89.250 C 45.824 85.613, 45.956 85.333, 44.997 81.990 C 44.449 80.078, 44 77.532, 44 76.333 C 44 72.933, 48.634 68.159, 52.670 67.402 C 56.081 66.762, 56.197 66.600, 55.651 63.237 C 55.320 61.200, 55.671 58.329, 56.491 56.368 C 57.265 54.516, 57.808 53, 57.699 53.001 C 57.590 53.001, 55.025 54.956, 52 57.345 M 249.272 62 C 247.496 62.825, 246.034 63.999, 246.022 64.609 C 246.010 65.219, 244.650 68.248, 243 71.340 C 239.562 77.783, 239.510 78, 241.396 78 C 244.322 78, 253.608 64.716, 252.809 61.675 C 252.584 60.819, 251.622 60.908, 249.272 62 M 222.661 65.410 L 216.823 68.759 216.532 77.129 C 216.372 81.733, 216.075 86.119, 215.871 86.875 C 215.146 89.563, 217.867 89.056, 221.559 85.814 C 225.944 81.964, 232 70.053, 232 65.278 C 232 61.019, 230.273 61.043, 222.661 65.410 M 234.776 66.250 C 234.510 68.588, 233.154 73.313, 231.762 76.750 C 230.078 80.910, 229.637 83, 230.442 83 C 233.003 83, 239.937 73.300, 242.417 66.250 L 243.911 62 239.586 62 L 235.260 62 234.776 66.250 M 53.400 72.428 C 51.694 73.170, 50.003 74.551, 49.640 75.496 C 48.897 77.433, 50.659 85, 51.853 85 C 52.280 85, 53.356 83.477, 54.243 81.616 C 55.130 79.756, 57.285 76.606, 59.032 74.616 L 62.207 71 59.354 71.039 C 57.784 71.061, 55.105 71.686, 53.400 72.428 M 163 71.722 C 162.175 72.032, 160.237 73.170, 158.693 74.251 C 156.122 76.052, 156.017 76.361, 157.443 77.937 C 158.299 78.883, 159 80.833, 159 82.270 C 159 87.731, 163.740 86.390, 166.997 80.006 C 169.777 74.556, 169.678 70.976, 166.750 71.079 C 165.512 71.122, 163.825 71.412, 163 71.722 M 208.676 72.737 C 208.248 73.417, 205.536 74.661, 202.648 75.500 L 197.398 77.026 197.557 83.216 C 197.644 86.620, 198.154 89.551, 198.689 89.730 C 201.778 90.759, 210.669 77.640, 209.812 73.315 C 209.555 72.013, 209.233 71.850, 208.676 72.737 M 177.500 79.415 C 177.500 82.942, 177.828 86.157, 178.230 86.560 C 179.373 87.708, 186.781 82.324, 188.420 79.154 L 189.897 76.299 183.963 74.650 C 180.700 73.742, 177.911 73, 177.765 73.001 C 177.619 73.002, 177.500 75.888, 177.500 79.415 M 244.972 79.056 C 243.612 80.101, 241.761 80.966, 240.857 80.978 C 239.953 80.990, 239.019 81.563, 238.780 82.250 C 238.220 83.863, 238.662 101.633, 239.289 102.694 C 239.551 103.137, 240.073 104.937, 240.449 106.693 C 240.932 108.946, 241.567 109.720, 242.604 109.322 C 243.413 109.011, 244.932 109.533, 245.979 110.481 C 247.821 112.148, 247.939 112.019, 249.517 106.589 C 250.415 103.500, 251.167 98.077, 251.187 94.538 C 251.223 88.209, 249.450 78.396, 248.122 77.575 C 247.749 77.345, 246.332 78.011, 244.972 79.056 M 144.319 82.637 C 140.374 84.936, 140.167 85.284, 140.654 88.787 C 141.543 95.181, 141.786 95.500, 144.162 93.386 C 147.705 90.235, 151.712 79.772, 149.250 80.100 C 148.838 80.155, 146.618 81.297, 144.319 82.637 M 90.155 83.143 C 87.162 84.005, 86.879 84.390, 87.465 86.803 C 88.277 90.145, 93.395 95.492, 94.894 94.566 C 95.502 94.190, 96 92.813, 96 91.506 C 96 90.199, 96.467 87.901, 97.039 86.398 C 98.620 82.240, 96.604 81.287, 90.155 83.143 M 149.870 88.669 C 145.402 97.580, 139 99.479, 139 91.893 C 139 86.875, 136.718 86.685, 134.427 91.512 C 132.188 96.230, 127.523 100, 123.923 100 C 120.629 100, 120.610 99.946, 122.078 94.656 C 122.665 92.542, 122.951 90.618, 122.713 90.380 C 122.475 90.142, 119.915 91.538, 117.025 93.483 C 107.564 99.850, 103.586 99.315, 106 92 C 107.543 87.326, 106.805 86.028, 102.426 85.710 C 99.809 85.520, 99.448 85.883, 98.648 89.500 C 98.162 91.700, 97.606 94.063, 97.413 94.750 C 97.220 95.438, 95.745 96, 94.135 96 C 92.035 96, 90.329 95, 88.104 92.465 C 86.397 90.521, 85 88.426, 85 87.810 C 85 86.203, 81.050 90.002, 79.398 93.198 C 77.494 96.879, 77.497 108, 79.402 108 C 80.173 108, 81.307 106.557, 81.922 104.793 C 84.147 98.410, 90.308 94.566, 91.606 98.750 C 91.904 99.713, 92.713 101.822, 93.402 103.437 L 94.656 106.375 96.578 102.437 C 98.022 99.480, 99.185 98.421, 101.250 98.184 C 103.613 97.912, 104 98.226, 104 100.413 C 104 103.998, 106.967 111, 108.486 111 C 110.286 111, 111.659 109.016, 112.464 105.250 C 113.796 99.022, 120.408 102.444, 121.614 109.986 C 121.982 112.291, 122.811 114, 123.560 114 C 125.681 114, 128.890 108.613, 130.083 103.047 C 130.695 100.195, 131.849 97.611, 132.648 97.305 C 133.448 96.998, 135.867 98.166, 138.024 99.899 C 141.022 102.308, 142.546 102.901, 144.489 102.413 C 147.806 101.581, 151 97.448, 151 93.988 C 151 89.670, 153.308 88.411, 157.131 90.645 C 159.982 92.312, 166.166 99.999, 167.235 103.206 C 167.918 105.255, 172.969 101.318, 174.568 97.491 C 176.305 93.334, 177.408 92.613, 179.946 93.971 C 181.983 95.061, 185 103.310, 185 107.790 C 185 109.911, 185.331 110.134, 187.629 109.557 C 191.042 108.700, 196.395 105.039, 198.911 101.840 L 200.900 99.311 188.200 93.738 C 171.623 86.463, 167.748 85.338, 164.450 86.841 C 161.057 88.387, 158.278 88.305, 157.300 86.631 C 156.860 85.878, 155.542 84.965, 154.370 84.602 C 152.576 84.046, 151.867 84.687, 149.870 88.669 M 108.548 90.513 C 107.580 93.048, 107.046 95.380, 107.362 95.695 C 108.651 96.984, 119 91.077, 119 89.052 C 119 88.611, 117.763 88, 116.250 87.695 C 114.737 87.390, 112.782 86.862, 111.904 86.522 C 110.702 86.057, 109.874 87.042, 108.548 90.513 M 126.909 88.659 C 125.094 89.145, 122.733 97.717, 124.170 98.605 C 125.402 99.366, 133 91.633, 133 89.618 C 133 88.036, 130.625 87.662, 126.909 88.659 M 44.750 93.131 C 39.840 97.142, 39.729 100.643, 44.354 105.689 L 47.707 109.348 48.427 102.047 C 48.822 98.031, 49.552 93.678, 50.048 92.373 C 51.308 89.060, 49.399 89.332, 44.750 93.131 M 153.936 91.193 C 153.901 91.362, 153.725 93.003, 153.545 94.841 C 153.365 96.678, 152.719 98.681, 152.109 99.291 C 150.094 101.306, 150.946 102, 155.435 102 C 157.874 102, 161.036 102.444, 162.462 102.986 C 164.925 103.922, 164.996 103.860, 163.879 101.736 C 161.737 97.665, 154.243 89.719, 153.936 91.193 M 176.546 98.912 C 175.718 100.513, 173.954 102.678, 172.626 103.722 L 170.212 105.621 176.106 108.226 L 182 110.831 182 106.884 C 182 103.183, 179.741 96, 178.577 96 C 178.288 96, 177.374 97.310, 176.546 98.912 M 86.036 100.933 C 85.467 101.996, 84.580 103.975, 84.064 105.331 C 83.145 107.748, 83.222 107.795, 87.848 107.649 L 92.571 107.500 91.043 103.250 C 89.394 98.661, 87.677 97.866, 86.036 100.933 M 99.759 100.713 C 98.805 101.768, 97.770 103.952, 97.460 105.566 C 96.954 108.199, 97.338 108.756, 101.198 111 C 107.488 114.655, 107.577 114.643, 105.097 110.440 C 103.848 108.323, 102.526 104.837, 102.160 102.693 C 101.515 98.912, 101.443 98.853, 99.759 100.713 M 132.552 100.250 C 132.340 100.938, 131.907 103.363, 131.589 105.639 L 131.012 109.778 134.645 107.926 C 136.643 106.908, 138.777 105.892, 139.389 105.669 C 140.020 105.438, 139.231 103.910, 137.563 102.132 C 134.394 98.753, 133.157 98.288, 132.552 100.250 M 200.978 104.031 C 199.790 105.699, 196.530 108.370, 193.732 109.968 C 188.956 112.696, 188.797 112.911, 191.126 113.496 C 192.491 113.838, 196.058 113.979, 199.053 113.809 L 204.500 113.500 204.798 107.250 C 205.131 100.257, 204.215 99.485, 200.978 104.031 M 220 101.882 C 220 103.463, 213.894 110.094, 210.585 112.106 L 207.670 113.879 210.348 114.551 C 211.821 114.921, 215.043 114.921, 217.509 114.551 C 221.057 114.019, 222.112 113.402, 222.566 111.594 C 223.452 108.063, 222.643 101.702, 221.250 101.244 C 220.563 101.018, 220 101.305, 220 101.882 M 207.822 105.929 C 208.035 108.168, 208.529 110, 208.918 110 C 209.916 110, 215.446 104.111, 214.927 103.600 C 214.692 103.368, 212.910 102.881, 210.967 102.519 L 207.434 101.859 207.822 105.929 M 226.557 105.223 C 225.701 106.445, 225 108.695, 225 110.223 C 225 112.494, 225.441 113, 227.421 113 C 229.286 113, 229.989 112.326, 230.487 110.059 C 231.041 107.536, 229.778 103, 228.522 103 C 228.297 103, 227.413 104, 226.557 105.223 M 234.219 106.825 C 231.441 111.766, 231.453 112, 234.465 112 C 235.878 112, 237.371 111.175, 237.965 110.066 C 239.307 107.559, 239.270 106.751, 237.719 104.630 C 236.554 103.037, 236.235 103.237, 234.219 106.825 M 114 106.695 C 114 108.271, 112.858 110.586, 111.250 112.270 C 108.536 115.111, 108.526 115.168, 110.500 116.630 C 112.323 117.980, 117.844 117.833, 120.210 116.370 C 121.163 115.781, 120.078 110.222, 118.332 106.750 C 116.527 103.161, 114 103.129, 114 106.695 M 174.250 129.643 C 173.012 129.916, 172 130.542, 172 131.034 C 172 134.960, 191.238 135.821, 199 132.243 L 203.500 130.169 197.401 130.084 C 194.046 130.038, 187.971 129.808, 183.901 129.574 C 179.830 129.339, 175.488 129.370, 174.250 129.643 M 149.750 130.748 C 134.686 131.038, 134 131.139, 134 133.082 C 134 134.538, 135.344 135.717, 138.750 137.249 C 142.704 139.026, 145.260 139.365, 154 139.268 C 164.356 139.154, 173.053 137.451, 173.250 135.500 C 173.357 134.442, 167.128 129.843, 166.102 130.223 C 165.771 130.345, 158.412 130.582, 149.750 130.748 M 114.113 140.496 C 103.371 144.141, 103.713 144.888, 116.500 145.709 C 124.680 146.234, 141.369 144.031, 143.218 142.182 C 144.571 140.829, 132.530 136.965, 127.556 137.155 C 125.325 137.241, 119.276 138.744, 114.113 140.496'
        },
        'AN': {
          d: 
          'M 266 1.140 C 266 1.613, 265.082 2, 263.960 2 C 258.625 2, 249.478 9.767, 247.510 15.969 C 246.926 17.808, 247.265 17.752, 223.500 19.903 C 213.700 20.790, 209 22.208, 209 24.279 C 209 26.293, 202.864 31.772, 199.750 32.539 C 197.598 33.069, 197 32.863, 197 31.588 C 197 30.692, 194.975 28.531, 192.500 26.787 C 190.025 25.042, 188 22.885, 188 21.993 C 188 21.100, 186.530 19.669, 184.733 18.812 C 181.726 17.379, 181.107 17.399, 176.983 19.071 C 171.248 21.396, 166.950 21.451, 163.104 19.250 C 160.679 17.862, 159.660 17.740, 158.183 18.658 C 156.065 19.976, 154.667 19.345, 153.657 16.617 C 153.042 14.953, 152.161 14.791, 146.096 15.225 C 138.236 15.788, 134.234 14.532, 131.735 10.718 C 129.715 7.635, 127.010 8.024, 123.738 11.870 C 122.401 13.441, 120.684 14.383, 119.472 14.210 C 118.106 14.014, 116.495 15.155, 114.534 17.710 C 112.933 19.794, 109.878 23.042, 107.745 24.926 C 103.932 28.294, 103.819 28.324, 101.051 26.689 C 98.387 25.116, 98.103 25.131, 95.752 26.980 C 94.386 28.055, 93.021 28.688, 92.720 28.386 C 91.546 27.213, 87.911 30.254, 85.993 34.013 C 84.886 36.183, 82.615 38.665, 80.947 39.527 C 77.281 41.423, 75.189 45.318, 76.796 47.254 C 78.170 48.909, 77.169 50.522, 74.189 51.452 C 71.669 52.239, 70.447 54.523, 69.537 60.152 C 69.093 62.894, 67.832 64.716, 64.471 67.470 C 60.915 70.384, 60.112 71.600, 60.562 73.393 C 60.914 74.795, 60.537 76.140, 59.564 76.947 C 58.704 77.661, 58 78.854, 58 79.599 C 58 80.344, 56.834 81.718, 55.410 82.651 C 53.322 84.019, 52.929 84.896, 53.385 87.174 C 53.696 88.728, 53.624 90.002, 53.225 90.005 C 51.755 90.014, 44.904 97.036, 45.470 97.952 C 45.792 98.473, 45.115 99.404, 43.964 100.019 C 42.324 100.897, 42.005 101.744, 42.487 103.940 C 42.985 106.206, 42.711 106.842, 41.051 107.276 C 39.657 107.641, 39 108.633, 39 110.371 C 39 113.467, 35.845 115.523, 33.238 114.127 C 30.805 112.825, 23.518 113.325, 21.589 114.926 C 20.715 115.651, 20 117.104, 20 118.154 C 20 120.774, 17.306 121.587, 15.134 119.621 C 13.123 117.801, 9 117.429, 9 119.067 C 9 119.655, 8.160 119.868, 7.132 119.542 C 6.105 119.216, 4.023 119.421, 2.505 119.998 C 0.022 120.942, -0.196 121.404, 0.325 124.617 C 1.025 128.930, 5.133 134.556, 9.438 137.096 C 11.239 138.158, 13.369 140.710, 14.392 143.028 C 15.380 145.266, 17.064 147.913, 18.135 148.911 C 19.818 150.479, 19.917 151.088, 18.864 153.400 C 17.842 155.641, 17.910 156.338, 19.280 157.708 C 20.792 159.221, 20.791 159.433, 19.263 160.550 C 17.795 161.623, 18.272 162.549, 23.556 168.889 C 26.897 172.898, 30.595 176.302, 32 176.663 C 33.375 177.016, 35.653 178.261, 37.063 179.430 C 38.473 180.600, 41.491 182.172, 43.770 182.924 C 47.534 184.166, 47.812 184.483, 46.798 186.377 C 46.185 187.524, 44.630 189.290, 43.344 190.302 C 40.547 192.502, 41.440 195.110, 45.775 197.404 C 48.648 198.924, 48.368 199.205, 42.750 200.436 C 39.473 201.153, 39.419 201.535, 41.989 205.750 C 43.156 207.664, 44.789 209, 45.961 209 C 47.056 209, 49.385 210.575, 51.136 212.500 C 53.828 215.457, 54.984 216, 58.596 216 C 64.726 216, 67.495 217.366, 69.068 221.166 C 72.748 230.052, 76.244 230.375, 80.408 222.214 C 82.010 219.074, 83.871 217.044, 85.980 216.134 C 88.928 214.862, 89.333 214.939, 91.824 217.255 C 93.296 218.623, 95.737 220.034, 97.250 220.390 C 98.763 220.747, 100 221.480, 100 222.019 C 100 223.270, 99.345 223.255, 96.906 221.950 C 95.367 221.126, 94.381 221.342, 92.337 222.950 C 90.903 224.077, 89.143 225, 88.424 225 C 85.946 225, 85.994 226.854, 88.630 232.932 C 90.441 237.107, 91.958 239.202, 93.440 239.574 C 94.632 239.873, 96.081 241.375, 96.661 242.912 C 97.254 244.484, 99.064 246.303, 100.798 247.071 C 102.493 247.821, 104.090 249.237, 104.347 250.218 C 104.643 251.350, 105.759 252, 107.406 252 C 111.178 252, 110.658 254.594, 106.489 256.572 C 102.242 258.587, 101.017 262.143, 103.282 265.876 C 105.884 270.164, 109.737 270.600, 125.110 268.346 C 127.628 267.977, 129.961 268.449, 132.820 269.908 C 135.198 271.121, 138.827 272, 141.460 272 C 143.957 272, 146 272.450, 146 273 C 146 273.550, 147.540 274, 149.423 274 C 151.616 274, 153.915 274.899, 155.818 276.500 C 159.551 279.642, 165.920 279.845, 171.500 277 C 176.438 274.482, 177.234 274.500, 181.975 277.228 C 185.507 279.261, 186.249 279.348, 190.437 278.228 C 196.517 276.602, 198.489 276.679, 200.086 278.604 C 201.036 279.749, 202.480 280.065, 205.133 279.709 C 208.144 279.305, 209.276 279.665, 211.099 281.605 C 212.336 282.922, 214.283 283.993, 215.424 283.985 C 218.580 283.962, 226.055 281.528, 226.832 280.271 C 227.211 279.659, 228.769 278.845, 230.296 278.462 C 233.513 277.654, 240 272.232, 240 270.351 C 240 269.647, 240.876 268.601, 241.948 268.028 C 243.019 267.455, 244.658 265.695, 245.589 264.119 C 247.397 261.059, 250.245 260.144, 264.289 258.111 C 268.120 257.557, 273.912 255.748, 277.583 253.959 C 283.959 250.853, 284.216 250.814, 290.460 251.993 C 296.497 253.132, 301 255.769, 301 258.166 C 301 259.304, 309.015 258.863, 312.147 257.554 C 313.247 257.094, 314.626 257.763, 316.298 259.565 C 318.546 261.989, 319.117 262.155, 321.895 261.186 C 324.728 260.199, 325.039 260.306, 325.579 262.459 C 326.493 266.100, 329.850 268.552, 337.810 271.392 C 346.146 274.366, 353.083 274.774, 355.429 272.429 C 356.329 271.529, 357 269.163, 357 266.893 C 357 264.713, 357.728 261.819, 358.618 260.461 C 359.990 258.367, 360.058 257.288, 359.069 253.358 C 358.427 250.809, 358.179 247.462, 358.517 245.921 C 358.856 244.379, 358.640 242.195, 358.036 241.068 C 356.667 238.509, 358.217 235.267, 364.491 227.564 C 367.020 224.459, 368.514 221.818, 367.942 221.464 C 367.360 221.104, 368.216 219.379, 369.966 217.385 C 371.635 215.485, 373 213.496, 373 212.965 C 373 212.434, 373.620 212, 374.378 212 C 375.135 212, 376.315 211.325, 377 210.500 C 377.770 209.572, 379.966 209, 382.756 209 C 388.338 209, 394.483 207.228, 396.454 205.051 C 398.087 203.247, 400.360 183.715, 398.997 183.201 C 398.561 183.036, 398.423 181.236, 398.690 179.201 C 399.103 176.064, 398.669 174.922, 395.839 171.707 C 393.051 168.541, 391.592 167.774, 387 167.066 C 380.605 166.079, 376.644 167.617, 369.911 173.699 L 365.913 177.312 362.997 175.156 C 359.692 172.713, 358.070 172.427, 357.848 174.250 C 357.764 174.938, 357.591 175.950, 357.463 176.500 C 357.335 177.050, 357.179 178.121, 357.115 178.881 C 356.843 182.144, 341 176.326, 341 172.962 C 341 171.963, 339.875 170.260, 338.500 169.179 C 337.125 168.097, 336 166.637, 336 165.935 C 336 165.232, 335.246 163.824, 334.324 162.805 C 333.038 161.385, 332.922 160.678, 333.824 159.776 C 335.553 158.047, 335.268 153.631, 332.851 144.673 C 331.075 138.091, 330.902 136.160, 331.851 133.534 C 332.483 131.787, 333 128.279, 333 125.738 C 333 123.197, 333.450 120.840, 334 120.500 C 334.550 120.160, 335.014 118.671, 335.032 117.191 C 335.049 115.711, 335.707 113.650, 336.493 112.612 C 337.562 111.200, 337.656 110.225, 336.865 108.747 C 336.257 107.611, 336.087 104.903, 336.467 102.374 C 337.003 98.796, 336.741 97.487, 335.063 95.353 C 333.928 93.911, 333 91.918, 333 90.924 C 333 89.931, 332.550 88.840, 332 88.500 C 331.450 88.160, 331 86.541, 331 84.901 C 331 81.153, 327.424 74, 325.551 74 C 324.777 74, 323.548 73.432, 322.821 72.737 C 322.095 72.042, 320.365 70.749, 318.979 69.864 C 317.472 68.902, 316.369 67.183, 316.237 65.593 C 315.895 61.459, 313.249 57.175, 310.820 56.821 C 309.304 56.600, 308.362 55.508, 307.797 53.313 C 307.345 51.560, 305.917 49.293, 304.622 48.275 C 303.328 47.257, 301.930 45.354, 301.515 44.047 C 301.100 42.739, 299.439 40.558, 297.825 39.199 C 296.144 37.785, 295.122 36.124, 295.434 35.312 C 295.733 34.533, 295.358 32.906, 294.601 31.698 C 293.844 30.489, 292.924 27.786, 292.556 25.690 C 292.159 23.430, 290.486 20.330, 288.443 18.069 C 286.550 15.973, 285 13.455, 285 12.473 C 285 10.013, 280.252 4, 278.309 4 C 277.435 4, 276.207 3.298, 275.580 2.441 C 274.376 0.793, 266 -0.344, 266 1.140 M 267.004 3.250 C 267.002 3.663, 265.628 4, 263.950 4 C 262.273 4, 259.622 4.661, 258.059 5.469 C 255.062 7.019, 249 14.509, 249 16.662 C 249 17.359, 248.213 18.334, 247.250 18.828 C 245.295 19.833, 233.894 21.120, 224 21.454 C 214.772 21.765, 213.115 22.475, 207.500 28.528 C 204.750 31.492, 201.295 34.201, 199.822 34.549 C 197.542 35.087, 196.905 34.716, 195.527 32.053 C 194.638 30.332, 192.355 28.183, 190.455 27.277 C 188.414 26.304, 187 24.896, 187 23.838 C 187 22.852, 185.846 21.290, 184.435 20.366 C 182.004 18.772, 181.602 18.797, 176.666 20.843 C 170.292 23.485, 167.349 23.546, 163.660 21.114 C 161.293 19.554, 160.325 19.429, 157.847 20.364 C 155.220 21.355, 154.677 21.224, 153.175 19.232 C 151.892 17.531, 150.373 16.944, 146.987 16.841 C 144.519 16.765, 142.050 16.824, 141.500 16.970 C 138.557 17.755, 135.693 16.626, 132.484 13.417 C 129.061 9.995, 128.795 9.904, 126.526 11.391 C 125.220 12.247, 123.862 13.859, 123.508 14.973 C 122.815 17.157, 121.494 17.608, 120.500 16 C 119.630 14.593, 118.003 14.755, 117.983 16.250 C 117.974 16.938, 115.905 19.300, 113.385 21.500 C 110.865 23.700, 107.784 26.512, 106.537 27.750 C 103.814 30.453, 102.286 30.569, 99.738 28.263 C 97.912 26.610, 97.751 26.620, 96.399 28.468 C 95.616 29.540, 93.757 30.430, 92.253 30.455 C 90.118 30.490, 89.153 31.291, 87.805 34.145 C 86.858 36.149, 84.827 38.732, 83.292 39.884 C 77.986 43.864, 77.908 43.993, 78.587 47.611 C 79.190 50.828, 79.005 51.172, 76.079 52.276 C 74.010 53.057, 72.731 54.336, 72.370 55.984 C 70.906 62.683, 69.528 65.285, 65.904 68.197 C 63.002 70.529, 62.135 71.851, 62.583 73.262 C 62.973 74.491, 62.382 76.029, 60.920 77.585 C 59.672 78.913, 59.039 80, 59.513 80 C 59.987 80, 59.121 81.308, 57.590 82.906 C 55.756 84.821, 55.007 86.445, 55.394 87.667 C 56.009 89.604, 52.162 94.014, 48.750 95.285 C 47.788 95.644, 47 96.826, 47 97.912 C 47 98.998, 46.130 100.496, 45.066 101.241 C 43.703 102.196, 43.403 103.025, 44.051 104.048 C 45.491 106.324, 45.166 107.813, 43.084 108.473 C 42.030 108.808, 40.715 110.378, 40.163 111.963 C 38.885 115.627, 35.713 117.452, 33.075 116.040 C 31.186 115.029, 27.115 114.864, 23.849 115.666 C 22.942 115.889, 21.917 117.196, 21.572 118.570 C 21.227 119.944, 19.783 121.597, 18.363 122.244 C 16.197 123.231, 15.579 123.145, 14.530 121.710 C 13.135 119.802, 10 119.387, 10 121.111 C 10 121.820, 8.824 122.007, 6.750 121.628 C 2.067 120.771, 0.652 121.955, 2.030 125.579 C 3.739 130.075, 7.572 134.580, 10.839 135.933 C 12.972 136.817, 14.380 138.557, 15.876 142.155 C 17.621 146.356, 18.273 147.048, 19.976 146.508 C 21.611 145.989, 21.999 146.310, 21.994 148.183 C 21.990 149.457, 21.354 151.714, 20.580 153.199 C 19.368 155.521, 19.369 156.061, 20.586 157.071 C 22.178 158.393, 22.488 161.658, 21.070 162.167 C 20.558 162.350, 22.470 165.284, 25.320 168.687 C 29.261 173.395, 31.149 174.890, 33.215 174.937 C 34.818 174.974, 36.349 175.783, 36.953 176.913 C 37.516 177.965, 40.120 179.618, 42.739 180.585 C 49.847 183.212, 50.159 183.599, 48.299 187.500 C 47.421 189.339, 45.871 191.062, 44.852 191.328 C 41.889 192.103, 42.690 193.801, 47.074 196.038 C 50.391 197.730, 50.930 198.380, 49.974 199.532 C 49.328 200.310, 47.269 201.234, 45.400 201.585 C 43.530 201.936, 42 202.623, 42 203.111 C 42 204.730, 45.968 208, 47.932 208 C 48.994 208, 50.780 209.286, 51.899 210.858 C 53.650 213.317, 54.782 213.793, 60.004 214.267 C 67.048 214.905, 68.623 215.954, 71.054 221.626 C 73.958 228.401, 75.080 228.255, 79.332 220.545 C 80.601 218.244, 83.081 215.765, 85.264 214.616 L 89.015 212.640 91.812 215.320 C 93.351 216.794, 95.260 218.010, 96.055 218.022 C 96.850 218.034, 98.625 218.913, 100 219.975 C 102.314 221.761, 102.379 222.027, 100.867 223.550 C 99.579 224.847, 98.798 224.962, 97.178 224.095 C 95.541 223.219, 94.408 223.417, 91.612 225.066 C 88.516 226.893, 88.211 227.425, 89.029 229.576 C 91.023 234.821, 93.063 237.885, 94.963 238.488 C 96.054 238.835, 97.526 240.325, 98.233 241.800 C 98.940 243.275, 100.752 245.073, 102.259 245.795 C 103.767 246.518, 105 247.709, 105 248.443 C 105 249.177, 106.559 250.070, 108.465 250.427 C 110.371 250.785, 112.164 251.457, 112.451 251.921 C 113.083 252.943, 109.260 258, 107.856 258 C 104.934 258, 103.027 262.918, 104.841 265.776 C 106.116 267.787, 115.446 268.452, 121.611 266.973 C 126.718 265.748, 127.427 265.809, 131.581 267.827 C 134.317 269.156, 137.962 270, 140.968 270 C 143.671 270, 146.123 270.389, 146.417 270.865 C 146.711 271.341, 148.602 271.998, 150.619 272.326 C 152.636 272.653, 155.382 273.950, 156.721 275.208 C 159.880 278.175, 166.381 278.038, 171.991 274.885 L 176.029 272.615 180.541 274.808 C 185.730 277.329, 187.291 277.449, 193.441 275.805 C 197.370 274.754, 198.148 274.824, 199.876 276.388 C 201.169 277.558, 203.050 278.063, 205.372 277.863 C 207.930 277.642, 209.552 278.170, 211.265 279.779 C 212.565 281.001, 214.770 282, 216.165 282 C 219.825 282, 224.750 280.094, 225.388 278.430 C 225.690 277.644, 227.100 277, 228.522 277 C 231.291 277, 238 272.273, 238 270.323 C 238 269.675, 239.025 268.325, 240.277 267.323 C 241.529 266.320, 243.548 264.090, 244.763 262.366 C 247.087 259.067, 248.461 258.590, 260.112 257.034 C 268.948 255.854, 273.885 254.430, 277.500 252.016 C 282.854 248.441, 295.297 249.607, 300.147 254.138 C 303.288 257.072, 307.321 257.749, 311.500 256.043 C 312.986 255.437, 314.185 255.868, 316.165 257.719 C 318.621 260.016, 319.116 260.117, 322.482 259.006 C 326.681 257.620, 326.379 257.443, 327.593 262 C 328.343 264.816, 329.444 265.940, 333.230 267.754 C 338.835 270.440, 348.415 272.683, 352.250 272.208 C 354.733 271.900, 355 271.480, 355 267.884 C 355 265.693, 355.728 262.492, 356.619 260.770 C 358.009 258.082, 358.066 256.873, 357.024 252.215 C 356.180 248.446, 356.128 246.472, 356.854 245.746 C 357.579 245.021, 357.470 243.876, 356.498 241.995 C 355.245 239.574, 355.315 238.878, 357.162 235.394 C 358.298 233.252, 360.751 229.624, 362.614 227.332 C 365.903 223.282, 366.836 221, 365.200 221 C 364.760 221, 363.868 221.532, 363.217 222.183 C 361.480 223.920, 360.658 222.508, 361.973 220.050 C 362.598 218.883, 364.489 217.652, 366.176 217.315 C 368.234 216.903, 369.894 215.598, 371.221 213.351 C 372.308 211.508, 373.773 210, 374.476 210 C 375.180 210, 376.315 209.325, 377 208.500 C 377.770 207.572, 379.966 207, 382.756 207 C 389.127 207, 394.836 205.092, 395.592 202.710 C 396.685 199.267, 397.745 184.538, 396.963 183.658 C 396.552 183.194, 396.417 181.169, 396.663 179.158 C 397.324 173.761, 394.058 170.288, 387.111 168.999 C 382.392 168.123, 381.194 168.262, 377.482 170.116 C 375.150 171.281, 371.551 173.738, 369.483 175.578 C 365.753 178.896, 363.367 179.021, 361.497 175.995 C 360.497 174.377, 359.012 174.859, 359.170 176.750 C 359.591 181.765, 359.169 182.286, 355.124 181.743 C 352.993 181.458, 348.493 179.987, 345.124 178.475 C 340.256 176.291, 339 175.266, 339 173.478 C 339 172.184, 337.940 170.535, 336.500 169.592 C 335.125 168.691, 334 167.212, 334 166.306 C 334 165.399, 333.232 163.809, 332.294 162.773 C 330.902 161.234, 330.810 160.534, 331.794 158.958 C 333.506 156.216, 333.299 152.692, 330.927 144.241 C 329.272 138.341, 329.071 136.236, 329.927 133.778 C 330.517 132.086, 331 128.545, 331 125.910 C 331 123.274, 331.450 120.840, 332 120.500 C 332.550 120.160, 333 118.706, 333 117.270 C 333 115.833, 333.688 113.897, 334.528 112.969 C 335.736 111.634, 335.833 110.692, 334.991 108.478 C 334.406 106.936, 334.206 103.810, 334.548 101.530 C 335.008 98.463, 334.774 97.057, 333.649 96.124 C 332.813 95.430, 331.840 93.548, 331.487 91.942 C 331.135 90.337, 330.431 88.766, 329.923 88.452 C 329.415 88.139, 329 86.169, 329 84.076 C 329 80.081, 325.936 75, 323.527 75 C 321.788 75, 315 68.191, 315 66.447 C 315 63.578, 312.545 59.929, 309.342 58.039 C 307.132 56.735, 305.989 55.294, 305.968 53.784 C 305.951 52.528, 305.276 50.626, 304.468 49.559 C 303.661 48.491, 303 47.984, 303 48.431 C 303 48.879, 302.325 48.685, 301.500 48 C 300.675 47.315, 300 45.998, 300 45.074 C 300 44.149, 298.423 41.864, 296.496 39.996 C 294.222 37.792, 293.183 35.998, 293.537 34.884 C 293.836 33.940, 293.658 32.907, 293.141 32.587 C 292.624 32.268, 291.653 29.642, 290.982 26.753 C 290.154 23.181, 288.645 20.329, 286.268 17.841 C 284.346 15.829, 282.984 13.579, 283.244 12.841 C 283.934 10.875, 280.174 6, 277.967 6 C 276.924 6, 275.606 5.132, 275.038 4.071 C 274.285 2.664, 273.059 2.190, 270.507 2.321 C 268.583 2.419, 267.007 2.837, 267.004 3.250'
        },
        'BE': {
          d: 
          'M 39.690 25.750 C 39.324 26.391, 44.226 48.202, 46.834 57.537 C 48.137 62.203, 46.490 63, 35.542 63 C 28.094 63, 26 63.303, 26 64.381 C 26 65.420, 28.542 65.934, 36.279 66.462 L 46.557 67.162 53.336 73.978 C 59.078 79.752, 61.692 81.498, 70.426 85.397 C 76.098 87.929, 81.585 89.971, 82.619 89.936 C 84.640 89.867, 84.483 89.787, 71 83.961 C 58.987 78.771, 60.781 78.851, 75.171 84.148 C 92.686 90.594, 93.559 91.026, 88.500 90.745 C 81.486 90.356, 13.993 94.673, 13.098 95.569 C 12.771 95.896, 13.376 96.802, 14.443 97.582 C 16.019 98.734, 22.294 99.003, 47.941 99.015 C 65.299 99.024, 80.125 99.427, 80.889 99.911 C 81.654 100.394, 82.396 102.284, 82.540 104.110 C 82.926 109.014, 88.063 113.253, 96.329 115.491 L 103.043 117.308 105.470 115.029 C 111.046 109.789, 109.122 102.803, 101.449 100.431 L 97.500 99.210 102.997 99.105 C 106.316 99.042, 111.465 99.951, 115.997 101.400 C 120.123 102.721, 127.550 105.009, 132.500 106.486 C 137.450 107.962, 144.875 110.194, 149 111.446 C 185.247 122.441, 184.912 122.367, 198.665 122.437 C 210.205 122.497, 210.963 122.375, 213.415 120.076 C 214.837 118.742, 216 116.875, 216 115.926 C 216 114.977, 213.626 112.018, 210.724 109.350 C 207.823 106.683, 204.406 103.022, 203.132 101.216 C 200.675 97.733, 191.935 92.890, 181.500 89.228 C 174.001 86.597, 158.328 82.205, 155 81.803 C 153.277 81.594, 152.400 80.793, 152.177 79.225 C 152 77.974, 150.650 76.198, 149.177 75.278 C 147.705 74.358, 146.360 73.517, 146.189 73.408 C 146.018 73.300, 148.369 69.696, 151.413 65.399 C 156.896 57.660, 157.164 56.058, 152.982 56.015 C 150.846 55.994, 143.834 60.923, 144.490 61.985 C 144.789 62.467, 144.506 63.187, 143.862 63.585 C 143.131 64.037, 142.959 63.876, 143.405 63.155 C 144.840 60.832, 142.542 62.140, 133.951 68.536 L 125.172 75.073 115.336 73.060 C 97.030 69.315, 76.527 64.975, 71 63.675 L 65.500 62.382 69.682 60.205 C 77.530 56.121, 75.991 53.737, 67.546 56.897 L 62.117 58.928 59.635 55.978 C 58.270 54.356, 53.953 46.722, 50.042 39.014 C 43.668 26.451, 41.140 23.212, 39.690 25.750 M 41.559 29.502 C 41.956 31.151, 42.864 33.659, 43.576 35.077 C 46.059 40.013, 50.041 55.989, 49.413 58.492 C 48.674 61.434, 50.486 62.356, 59 63.373 L 64.500 64.030 61 60.931 C 59.075 59.226, 58.132 58.164, 58.905 58.570 C 59.830 59.057, 60.066 58.915, 59.595 58.155 C 59.203 57.520, 58.345 57, 57.689 57 C 56.438 57, 55.361 55.089, 46.980 38 C 41.241 26.298, 40.513 25.157, 41.559 29.502 M 45.079 44.583 C 45.127 45.748, 45.364 45.985, 45.683 45.188 C 45.972 44.466, 45.936 43.603, 45.604 43.271 C 45.272 42.939, 45.036 43.529, 45.079 44.583 M 149.758 59.059 C 149.066 60.192, 144.463 64.562, 139.529 68.771 L 130.557 76.422 134.525 77.247 C 138.222 78.015, 138.688 77.846, 141.331 74.786 C 142.892 72.979, 143.833 72.175, 143.424 73 C 143.014 73.825, 143.065 74.149, 143.535 73.721 C 144.006 73.293, 144.485 72.302, 144.600 71.519 C 144.715 70.737, 146.877 67.409, 149.404 64.124 C 151.932 60.839, 154 57.893, 154 57.576 C 154 56.125, 150.886 57.214, 149.758 59.059 M 65.441 59.555 C 63.611 61.022, 63.643 61.042, 66 59.920 C 69.061 58.462, 69.628 58, 68.358 58 C 67.821 58, 66.509 58.700, 65.441 59.555 M 49.460 63.924 C 50.976 65.624, 51.130 66.302, 50.139 66.914 C 46.990 68.860, 63.210 79.602, 74.220 82.860 C 76.024 83.394, 81.325 85.210, 86 86.896 C 90.675 88.582, 97.172 90.455, 100.437 91.059 C 103.702 91.662, 108.557 93.262, 111.225 94.614 C 113.892 95.966, 122.696 99.096, 130.788 101.570 C 138.879 104.044, 149.325 107.243, 154 108.679 C 174.283 114.910, 177.847 115.893, 184 116.950 C 187.575 117.565, 193.875 118.444, 198 118.904 C 203.709 119.541, 204.425 119.767, 201 119.852 C 194.751 120.007, 177.054 117.388, 172.376 115.617 C 170.244 114.810, 162.200 112.267, 154.500 109.967 C 146.800 107.666, 136.225 104.469, 131 102.862 C 125.775 101.256, 119.700 99.737, 117.500 99.488 L 113.500 99.036 117 100.148 C 125.244 102.769, 149.243 110.006, 158 112.512 C 163.225 114.007, 170.875 116.326, 175 117.666 C 185.038 120.928, 205.673 122.073, 211 119.665 C 214.458 118.102, 214.464 118.089, 211.500 118.547 L 208.500 119.011 211.943 117.424 L 215.387 115.837 209.460 110.043 C 203.869 104.578, 199.863 102.794, 198.421 105.128 C 198.120 105.616, 197.017 105.544, 195.939 104.968 C 194.301 104.091, 194 104.262, 194 106.072 C 194 107.716, 194.407 108.049, 195.750 107.503 C 200.084 105.742, 203.011 105.208, 203.550 106.081 C 204.203 107.137, 203.228 107.573, 197.405 108.832 C 194.337 109.496, 192.580 109.344, 190.405 108.227 C 186.599 106.274, 186.724 106.444, 187.436 104.201 C 187.961 102.548, 188.725 102.327, 192.468 102.749 C 197.357 103.300, 202.365 102.399, 201.569 101.111 C 201.286 100.654, 197.105 100.030, 192.278 99.723 C 186.850 99.379, 176.629 97.438, 165.500 94.640 C 155.600 92.150, 136.475 87.382, 123 84.044 C 109.525 80.706, 93.550 76.633, 87.500 74.993 C 81.450 73.353, 73.886 71.301, 70.692 70.433 C 64.749 68.818, 57.786 66.109, 59.397 66.039 C 59.890 66.018, 65.515 67.525, 71.897 69.388 C 78.279 71.252, 88.225 74.005, 94 75.506 C 99.775 77.007, 107.650 79.074, 111.500 80.099 C 115.350 81.124, 127.950 84.243, 139.500 87.030 C 151.050 89.817, 165.900 93.453, 172.500 95.109 C 184.367 98.087, 198 99.947, 198 98.588 C 198 96.199, 172.531 87.275, 154 83.173 C 148.775 82.016, 139.550 79.959, 133.500 78.602 C 127.450 77.244, 116.875 74.970, 110 73.547 C 103.125 72.125, 92.408 69.803, 86.184 68.388 C 78.868 66.725, 71.267 65.734, 64.684 65.584 C 57.152 65.414, 53.589 64.881, 51 63.540 L 47.500 61.726 49.460 63.924 M 37.250 64.728 C 39.313 64.944, 42.688 64.944, 44.750 64.728 C 46.813 64.513, 45.125 64.336, 41 64.336 C 36.875 64.336, 35.188 64.513, 37.250 64.728 M 134.105 70.058 C 130.588 72.776, 128.390 75, 129.221 75 C 130.052 75, 133.155 72.762, 136.116 70.027 C 139.077 67.292, 141.275 65.068, 141 65.085 C 140.725 65.102, 137.622 67.340, 134.105 70.058 M 62 72.544 C 62 73.528, 62.296 74.037, 62.658 73.675 C 63.020 73.313, 63.920 73.519, 64.658 74.131 C 65.696 74.992, 66 74.839, 66 73.456 C 66 72.472, 65.704 71.963, 65.342 72.325 C 64.980 72.687, 64.080 72.481, 63.342 71.869 C 62.304 71.008, 62 71.161, 62 72.544 M 67 73.946 C 67 74.397, 67.900 75.002, 69 75.290 C 70.175 75.597, 71 75.320, 71 74.619 C 71 73.963, 70.100 73.358, 69 73.275 C 67.900 73.192, 67 73.494, 67 73.946 M 72 74.893 C 72 76.002, 75.076 77.257, 75.864 76.469 C 76.182 76.151, 75.780 75.473, 74.971 74.961 C 73.101 73.778, 72 73.753, 72 74.893 M 142.959 77.076 C 141.950 78.963, 142.032 79.053, 143.869 78.070 C 146.568 76.626, 147.482 75, 145.594 75 C 144.756 75, 143.570 75.934, 142.959 77.076 M 81.356 78.234 C 80.914 78.948, 81.261 79.114, 82.336 78.701 C 83.251 78.350, 84 78.446, 84 78.915 C 84 79.383, 84.900 80.002, 86 80.290 C 87.328 80.637, 88 80.320, 88 79.347 C 88 78.541, 87.550 78.160, 87 78.500 C 86.450 78.840, 86 78.737, 86 78.272 C 86 76.997, 82.140 76.965, 81.356 78.234 M 147.543 78.931 C 146.860 80.036, 148.437 81.230, 149.361 80.306 C 150.311 79.355, 150.134 78, 149.059 78 C 148.541 78, 147.859 78.419, 147.543 78.931 M 89 79.955 C 89 80.412, 89.712 81.059, 90.582 81.393 C 92.781 82.237, 93 82.175, 93 80.713 C 93 80.005, 92.100 79.358, 91 79.275 C 89.900 79.192, 89 79.498, 89 79.955 M 94 81.287 C 94 81.995, 94.900 82.642, 96 82.725 C 98.380 82.904, 98.664 81.469, 96.418 80.607 C 94.219 79.763, 94 79.825, 94 81.287 M 99 83.121 C 99 83.669, 99.450 83.840, 100 83.500 C 100.550 83.160, 101 83.359, 101 83.941 C 101 84.523, 101.450 85, 102 85 C 103.926 85, 102.980 82.424, 101 82.275 C 99.900 82.192, 99 82.573, 99 83.121 M 104.079 84.583 C 104.127 85.748, 104.364 85.985, 104.683 85.188 C 104.972 84.466, 104.936 83.603, 104.604 83.271 C 104.272 82.939, 104.036 83.529, 104.079 84.583 M 106.583 83.866 C 106.152 84.563, 106.070 85.403, 106.400 85.733 C 107.295 86.628, 108.271 85.312, 107.787 83.862 C 107.449 82.846, 107.213 82.846, 106.583 83.866 M 109.079 85.583 C 109.127 86.748, 109.364 86.985, 109.683 86.188 C 109.972 85.466, 109.936 84.603, 109.604 84.271 C 109.272 83.939, 109.036 84.529, 109.079 85.583 M 112 88.320 C 112 92.486, 114.907 94.469, 115.150 90.469 C 115.233 89.111, 115.345 87.444, 115.400 86.764 C 115.455 86.084, 114.713 85.376, 113.750 85.190 C 112.355 84.922, 112 85.557, 112 88.320 M 113.070 88.750 C 113.133 91.187, 113.238 91.272, 114 89.500 C 115.174 86.769, 115.174 86, 114 86 C 113.450 86, 113.032 87.237, 113.070 88.750 M 121.409 88.376 C 120.562 90.584, 121.689 91.711, 123.217 90.183 C 124.119 89.281, 124.122 88.722, 123.233 87.833 C 122.343 86.943, 121.909 87.072, 121.409 88.376 M 125.531 89.293 C 125.103 90.279, 125.034 91.367, 125.376 91.710 C 126.392 92.725, 127.211 91.299, 126.743 89.328 C 126.329 87.581, 126.275 87.580, 125.531 89.293 M 129 90.941 C 129 92.073, 129.450 93, 130 93 C 130.550 93, 131 92.352, 131 91.559 C 131 90.766, 130.550 89.840, 130 89.500 C 129.450 89.160, 129 89.809, 129 90.941 M 132.531 91.293 C 132.103 92.279, 132.034 93.367, 132.376 93.710 C 133.392 94.725, 134.211 93.299, 133.743 91.328 C 133.329 89.581, 133.275 89.580, 132.531 91.293 M 136.531 92.293 C 136.103 93.279, 136.034 94.367, 136.376 94.710 C 137.392 95.725, 138.211 94.299, 137.743 92.328 C 137.329 90.581, 137.275 90.580, 136.531 92.293 M 88 93.057 C 89.394 93.458, 85.190 93.817, 78.500 93.868 C 71.900 93.919, 58.797 94.393, 49.382 94.921 C 39.967 95.450, 31.417 95.680, 30.382 95.433 C 29.347 95.186, 25.575 95.384, 22 95.873 C 17.738 96.457, 27.549 96.625, 50.500 96.363 C 69.750 96.142, 91.125 95.939, 98 95.911 C 110.392 95.860, 110.465 95.846, 106.500 94.299 C 104.218 93.409, 98.849 92.652, 94 92.538 C 89.248 92.426, 86.602 92.655, 88 93.057 M 140 94 C 140 95.100, 140.450 96, 141 96 C 141.550 96, 142 95.100, 142 94 C 142 92.900, 141.550 92, 141 92 C 140.450 92, 140 92.900, 140 94 M 143.531 94.293 C 143.103 95.279, 143.034 96.367, 143.376 96.710 C 144.392 97.725, 145.211 96.299, 144.743 94.328 C 144.329 92.581, 144.275 92.580, 143.531 94.293 M 147 96 C 147 97.100, 147.450 98, 148 98 C 148.550 98, 149 97.100, 149 96 C 149 94.900, 148.550 94, 148 94 C 147.450 94, 147 94.900, 147 96 M 150 97.500 C 150 98.325, 150.675 99, 151.500 99 C 152.325 99, 153 98.325, 153 97.500 C 153 96.675, 152.325 96, 151.500 96 C 150.675 96, 150 96.675, 150 97.500 M 154.531 97.293 C 154.103 98.279, 154.034 99.367, 154.376 99.710 C 155.392 100.725, 156.211 99.299, 155.743 97.328 C 155.329 95.581, 155.275 95.580, 154.531 97.293 M 158 99 C 158 100.100, 158.450 101, 159 101 C 159.550 101, 160 100.100, 160 99 C 160 97.900, 159.550 97, 159 97 C 158.450 97, 158 97.900, 158 99 M 161.400 99.400 C 161.034 100.354, 161.229 101.629, 161.834 102.234 C 162.634 103.034, 163.116 102.861, 163.600 101.600 C 163.966 100.646, 163.771 99.371, 163.166 98.766 C 162.366 97.966, 161.884 98.139, 161.400 99.400 M 86.767 100.167 C 87.631 101.031, 88.530 101.048, 90.217 100.235 C 92.361 99.202, 92.290 99.131, 89.050 99.068 C 86.420 99.016, 85.878 99.278, 86.767 100.167 M 166.667 99.667 C 166.300 100.033, 166 102.006, 166 104.050 C 166 106.889, 166.459 107.887, 167.942 108.275 C 170.551 108.957, 171 108.320, 171 103.940 C 171 101.465, 170.469 100.010, 169.418 99.607 C 167.460 98.855, 167.478 98.855, 166.667 99.667 M 90.118 101.638 C 88.259 102.449, 86.121 102.877, 85.368 102.588 C 84.517 102.261, 84 102.756, 84 103.896 C 84 105.141, 85.361 106.226, 88.250 107.283 C 95.852 110.064, 97 110.250, 97 108.702 C 97 107.914, 97.932 106.085, 99.071 104.637 L 101.142 102.004 98.506 101.002 C 95.199 99.745, 94.303 99.813, 90.118 101.638 M 167 103.417 C 167 106, 167.436 107, 168.563 107 C 169.719 107, 170.045 106.172, 169.813 103.827 C 169.361 99.243, 167 98.898, 167 103.417 M 103 104.972 C 103 105.473, 103.450 106.160, 104 106.500 C 106.408 107.988, 103.137 113.746, 100.669 112.362 C 99.948 111.958, 99.989 112.233, 100.778 113.081 C 102.766 115.219, 105.446 112.923, 105.803 108.776 C 106.015 106.311, 105.639 105.076, 104.553 104.659 C 103.699 104.331, 103 104.472, 103 104.972 M 189 104.965 C 189 105.495, 189.900 106.411, 191 107 C 192.695 107.907, 193 107.760, 193 106.035 C 193 104.667, 192.345 104, 191 104 C 189.900 104, 189 104.434, 189 104.965 M 86.183 108.721 C 87.677 110.520, 94.430 114, 96.429 114 C 99.740 114, 96.635 111.371, 90.987 109.393 C 86.615 107.861, 85.319 107.680, 86.183 108.721 M 101 109 C 101 110.100, 101.450 111, 102 111 C 102.550 111, 103 110.100, 103 109 C 103 107.900, 102.550 107, 102 107 C 101.450 107, 101 107.900, 101 109'
        },
        'RO': {
          d:
        'M 33.711 4.931 C 32.355 6.543, 30.225 10.031, 28.979 12.681 C 27.584 15.647, 23.500 20.619, 18.356 25.614 L 10 33.728 10 40.314 L 10 46.900 15.750 47.200 L 21.500 47.500 21.763 82.340 L 22.026 117.180 19.658 119.994 C 18.356 121.542, 14.511 127.753, 11.114 133.798 L 4.937 144.787 5.218 157.144 L 5.500 169.500 12.500 170 C 16.350 170.275, 20.063 170.864, 20.750 171.309 C 21.438 171.754, 22 173.644, 22 175.509 L 22 178.900 16.260 179.200 C 11.887 179.429, 10.445 179.891, 10.208 181.140 C 9.957 182.456, 10.746 182.778, 14.198 182.768 C 16.564 182.762, 19.347 182.811, 20.382 182.878 C 22.218 182.997, 22.249 185.818, 21.609 296.133 C 21.249 358.356, 20.712 409.656, 20.418 410.133 C 20.123 410.610, 21.682 411, 23.882 411 C 26.082 411, 28.160 411.450, 28.500 412 C 28.840 412.550, 32.665 413, 37 413 C 41.335 413, 45.160 412.550, 45.500 412 C 45.840 411.450, 47.679 411, 49.586 411 L 53.055 411 52.395 297 C 51.752 185.844, 51.783 182.997, 53.618 182.878 C 54.653 182.811, 57.436 182.762, 59.802 182.768 C 63.254 182.778, 64.043 182.456, 63.792 181.140 C 63.555 179.891, 62.113 179.429, 57.740 179.200 L 52 178.900 52 175.067 C 52 170.593, 53.132 170.035, 62.250 170.014 L 68 170 68 156.422 L 68 142.845 61.836 132.172 C 58.445 126.303, 54.840 120.565, 53.823 119.422 C 52.088 117.471, 51.990 115.188, 52.237 82.422 L 52.500 47.500 58.250 47.200 L 64 46.900 63.985 40.700 L 63.971 34.500 55.615 25.965 C 51.020 21.270, 46.250 15.420, 45.016 12.965 C 42.337 7.636, 38.237 2, 37.038 2 C 36.565 2, 35.068 3.319, 33.711 4.931 M 31.726 16.250 C 30.359 19.688, 28.928 24.075, 28.545 26 C 27.348 32.032, 26.986 32.770, 24.967 33.298 C 23.266 33.743, 23 34.690, 23 40.290 C 23 45.926, 23.260 46.835, 25 47.290 C 27.682 47.991, 27.697 54.157, 25.034 60.913 C 23.166 65.654, 23.072 68.467, 23.140 117.950 L 23.211 170 28.594 170 L 33.977 170 34.250 130.750 L 34.524 91.500 34.762 130.750 C 34.995 169.177, 35.042 170, 36.988 170 C 38.934 170, 38.983 169.165, 39.250 130.750 L 39.524 91.500 39.762 130.750 L 40 170 45.500 170 L 51 170 51 152.200 C 51 140.603, 50.617 134.017, 49.902 133.302 C 49.188 132.588, 49.044 130.155, 49.490 126.352 C 49.868 123.133, 50.376 108.504, 50.620 93.842 C 51.034 68.865, 50.934 66.848, 49.032 61.842 C 47.915 58.904, 47.001 54.362, 47.001 51.750 C 47 47.666, 47.281 47, 49 47 C 50.754 47, 51 46.333, 51 41.582 C 51 35.340, 50.318 33, 48.500 33 C 47.174 33, 46 30.872, 46 28.470 C 46 27.719, 44.607 23.256, 42.905 18.552 C 40.024 10.590, 39.618 10, 37.012 10 C 34.510 10, 33.949 10.664, 31.726 16.250 M 16.693 28.805 C 11.103 34.454, 11 34.661, 11 40.279 L 11 46 14.900 46 C 18.736 46, 18.818 45.922, 19.870 41.250 C 21.869 32.371, 23.274 23.940, 22.829 23.496 C 22.585 23.252, 19.824 25.641, 16.693 28.805 M 51 24.031 C 51 25.455, 53.447 39.195, 54.512 43.750 C 54.949 45.618, 55.713 46, 59.019 46 L 63 46 63 40.219 C 63 34.479, 62.957 34.395, 57 28.500 C 53.700 25.234, 51 23.224, 51 24.031 M 12.379 133.760 L 6.258 144.497 6.379 156.498 L 6.500 168.500 13.250 168.796 L 20 169.091 20 146.046 C 20 133.371, 19.663 123.005, 19.250 123.012 C 18.837 123.018, 15.746 127.855, 12.379 133.760 M 54 146 L 54 169 60.500 169 L 67 169 67 156.347 L 67 143.693 61.250 133.363 C 58.087 127.682, 55.163 123.026, 54.750 123.017 C 54.337 123.008, 54 133.350, 54 146 M 27.749 174.150 C 28.102 175.498, 27.708 176.740, 26.693 177.483 C 25.331 178.479, 25.621 178.667, 28.521 178.667 C 31.273 178.667, 31.746 178.399, 30.866 177.339 C 30.260 176.608, 30 175.108, 30.288 174.005 C 30.671 172.543, 30.322 172, 29 172 C 27.638 172, 27.327 172.534, 27.749 174.150 M 43.417 173.645 C 43.764 174.549, 43.361 176.049, 42.520 176.978 C 41.113 178.533, 41.272 178.667, 44.529 178.667 C 46.964 178.667, 47.744 178.344, 47.033 177.633 C 46.465 177.065, 46 175.565, 46 174.300 C 46 172.854, 45.403 172, 44.393 172 C 43.313 172, 42.993 172.539, 43.417 173.645 M 23 178.500 C 23 178.775, 23.225 179, 23.500 179 C 23.775 179, 24 178.775, 24 178.500 C 24 178.225, 23.775 178, 23.500 178 C 23.225 178, 23 178.225, 23 178.500 M 33.333 178.667 C 33.700 179.033, 34.300 179.033, 34.667 178.667 C 35.033 178.300, 34.733 178, 34 178 C 33.267 178, 32.967 178.300, 33.333 178.667 M 36 178.500 C 36 178.775, 36.225 179, 36.500 179 C 36.775 179, 37 178.775, 37 178.500 C 37 178.225, 36.775 178, 36.500 178 C 36.225 178, 36 178.225, 36 178.500 M 38.333 178.667 C 38.700 179.033, 39.300 179.033, 39.667 178.667 C 40.033 178.300, 39.733 178, 39 178 C 38.267 178, 37.967 178.300, 38.333 178.667 M 50 178.500 C 50 178.775, 50.225 179, 50.500 179 C 50.775 179, 51 178.775, 51 178.500 C 51 178.225, 50.775 178, 50.500 178 C 50.225 178, 50 178.225, 50 178.500 M 23 223.500 L 23 258 37 258 L 51 258 51 223.500 L 51 189 37 189 L 23 189 23 223.500 M 23 286.233 C 23 309.333, 23.056 310, 25 310 C 26.967 310, 27 310.667, 27 350.500 L 27 391 37 391 L 47 391 47 350.500 C 47 310.667, 47.033 310, 49 310 C 50.944 310, 51 309.333, 51 286.236 L 51 262.472 37 262.469 L 23 262.466 23 286.233 M 23.500 315 C 21.743 316.941, 21.753 317, 23.845 317 C 25.333 317, 26 316.381, 26 315 C 26 313.900, 25.845 313, 25.655 313 C 25.465 313, 24.495 313.900, 23.500 315 M 48 314.878 C 48 316.098, 48.638 317, 49.500 317 C 50.325 317, 51 316.605, 51 316.122 C 51 315.640, 50.325 314.685, 49.500 314 C 48.247 312.960, 48 313.104, 48 314.878 M 22 323 C 22 327.333, 22.267 328, 24 328 C 25.733 328, 26 327.333, 26 323 C 26 318.667, 25.733 318, 24 318 C 22.267 318, 22 318.667, 22 323 M 48 323 C 48 327.333, 48.267 328, 50 328 C 51.733 328, 52 327.333, 52 323 C 52 318.667, 51.733 318, 50 318 C 48.267 318, 48 318.667, 48 323 M 22 334 C 22 338.333, 22.267 339, 24 339 C 25.733 339, 26 338.333, 26 334 C 26 329.667, 25.733 329, 24 329 C 22.267 329, 22 329.667, 22 334 M 48 334 C 48 338.333, 48.267 339, 50 339 C 51.733 339, 52 338.333, 52 334 C 52 329.667, 51.733 329, 50 329 C 48.267 329, 48 329.667, 48 334 M 22 355.500 C 22 370.235, 22.097 371, 23.962 371 C 25.782 371, 25.924 370.274, 25.913 361.064 C 25.903 352.559, 25.656 351.063, 24.201 350.680 C 22.642 350.269, 22.646 350.222, 24.250 350.116 C 25.668 350.022, 26 349.051, 26 345 C 26 340.667, 25.733 340, 24 340 C 22.086 340, 22 340.667, 22 355.500 M 48 345 C 48 349.333, 48.267 350, 50 350 C 51.733 350, 52 349.333, 52 345 C 52 340.667, 51.733 340, 50 340 C 48.267 340, 48 340.667, 48 345 M 48 361 C 48 370.333, 48.133 371, 50 371 C 51.867 371, 52 370.333, 52 361 C 52 351.667, 51.867 351, 50 351 C 48.133 351, 48 351.667, 48 361 M 23 360.500 C 23 360.775, 23.225 361, 23.500 361 C 23.775 361, 24 360.775, 24 360.500 C 24 360.225, 23.775 360, 23.500 360 C 23.225 360, 23 360.225, 23 360.500 M 49.333 360.667 C 49.700 361.033, 50.300 361.033, 50.667 360.667 C 51.033 360.300, 50.733 360, 50 360 C 49.267 360, 48.967 360.300, 49.333 360.667 M 22 377 C 22 381.333, 22.267 382, 24 382 C 25.733 382, 26 381.333, 26 377 C 26 372.667, 25.733 372, 24 372 C 22.267 372, 22 372.667, 22 377 M 48 377 C 48 381.333, 48.267 382, 50 382 C 51.733 382, 52 381.333, 52 377 C 52 372.667, 51.733 372, 50 372 C 48.267 372, 48 372.667, 48 377 M 22 388 C 22 392.333, 22.267 393, 24 393 C 25.733 393, 26 392.333, 26 388 C 26 383.667, 25.733 383, 24 383 C 22.267 383, 22 383.667, 22 388 M 48 388 C 48 392.333, 48.267 393, 50 393 C 51.733 393, 52 392.333, 52 388 C 52 383.667, 51.733 383, 50 383 C 48.267 383, 48 383.667, 48 388 M 23.500 396 C 24.495 397.100, 25.465 398, 25.655 398 C 25.845 398, 26 397.100, 26 396 C 26 394.619, 25.333 394, 23.845 394 C 21.753 394, 21.743 394.059, 23.500 396 M 48 396.122 C 48 397.896, 48.247 398.040, 49.500 397 C 50.325 396.315, 51 395.360, 51 394.878 C 51 394.395, 50.325 394, 49.500 394 C 48.638 394, 48 394.902, 48 396.122 M 28.026 395.825 C 27.462 396.013, 27 397.029, 27 398.083 C 27 399.845, 27.813 400, 37.070 400 C 46.912 400, 47.132 399.950, 46.820 397.772 C 46.517 395.664, 46.025 395.542, 37.776 395.513 C 32.978 395.496, 28.590 395.637, 28.026 395.825 M 22.622 403.825 C 22.179 405.104, 22.083 406.417, 22.409 406.742 C 23.445 407.779, 24.174 406.250, 23.794 403.836 L 23.426 401.500 22.622 403.825 M 27.298 402.631 C 27.645 402.979, 27.480 404.104, 26.930 405.131 C 26.075 406.728, 26.299 407, 28.465 407 C 30.502 407, 31 406.509, 31 404.500 C 31 402.603, 30.478 402, 28.833 402 C 27.642 402, 26.951 402.284, 27.298 402.631 M 34.755 404.500 C 34.340 406.672, 34.635 407, 37 407 C 39.365 407, 39.660 406.672, 39.245 404.500 C 38.950 402.957, 38.091 402, 37 402 C 35.909 402, 35.050 402.957, 34.755 404.500 M 42.755 404.500 C 43.104 406.326, 43.870 407, 45.595 407 C 47.752 407, 47.858 406.783, 46.818 404.500 C 46.192 403.125, 44.914 402, 43.978 402 C 42.703 402, 42.397 402.626, 42.755 404.500 M 49.755 404.500 C 50.018 405.875, 50.679 407, 51.224 407 C 51.768 407, 51.941 406.288, 51.607 405.418 C 51.273 404.548, 51 403.423, 51 402.918 C 51 402.413, 50.612 402, 50.139 402 C 49.665 402, 49.492 403.125, 49.755 404.500 M 32.667 403.667 C 32.300 404.033, 32 404.798, 32 405.367 C 32 405.993, 32.466 405.934, 33.183 405.217 C 33.834 404.566, 34.134 403.801, 33.850 403.517 C 33.566 403.233, 33.033 403.300, 32.667 403.667 M 40 404 C 40 404.733, 40.300 405.033, 40.667 404.667 C 41.033 404.300, 41.033 403.700, 40.667 403.333 C 40.300 402.967, 40 403.267, 40 404'
      }
      }
    },
  ],
}

const ShapeInputs = ({ shape }) => {
  const {
          inputData, setInputData, 
          processedData, setProcessedData, 
          setPath,
          setPoly,
          setDefaultShape
        } = useContext(Context)

  const MIN = 0
  const MAX = 378

  useEffect(() => {
    setDefaultShape(()=>{
      return basicShapeConfig[shape]?.defaultShape || advancedShapeConfig[shape]?.[0]?.defaultShape || {}
    })
  }, [setDefaultShape, shape])

  const validateElements = (command) => {//path, poly
    const validity = []
    //require input on shape path via non-submit buttons
    // intentional: excludes checkboxes
    const inputElements = Array.from(document.querySelectorAll(`form input`)).filter(inputElement => 
      inputElement.id.split(/\s+/).includes(command)
    )
    inputElements && (() => {
      inputElements.forEach((element, index) => {
        element.setAttribute('required', 'required')
        validity[index] = element.checkValidity()
      })

      const invalidElement = inputElements[validity.indexOf(false)]
      if(invalidElement){
        invalidElement.reportValidity()
      }
      inputElements.forEach(element => {
        element.removeAttribute('required')
      })
    })();

    return validity
  }

  const sortByAttributeOrder = (data) => {//poly, path
    const attributeOrder = ['x1', 'y1', 'x2', 'y2', 'rx', 'ry', 'x-axis-rotation', 'large-arc-flag', 'sweep-flag', 'x', 'y']
    let sortedData = {}
    attributeOrder.forEach((attribute) => {
      if(data[attribute] !== undefined){
        sortedData[attribute] = data[attribute]
      }
    })
    return sortedData
  }

  const verifyArcFlags = (data, command) => {//path
    if(command !== 'A') return data
    data['large-arc-flag'] ? null : data['large-arc-flag'] = 0
    data['sweep-flag'] ? null : data['sweep-flag'] = 0
    return data
  }

  const createPathFromObject = (incommingData) => {//path
    const pathCommand = Object.keys(incommingData)[0]
    const pathCoords = Object.values(incommingData[pathCommand]).join(' ')
    return `${pathCommand} ${pathCoords}`
  }

  const createPathFromArrayOfObjects = (incommingData) => {//path
    //validate data?
    return incommingData.reduce((path, data) => {
      return path.concat(' ', createPathFromObject(data)).trim()
    }, '')
  }

  const createPolyFromObject = (incomingData) => {//poly
    return Object.values(incomingData).join(', ')
  }

  const createPolyFromArrayOfObjects =  (incomingData) => {//poly
    return incomingData.reduce((poly, data) => {
      return poly.concat(" ", createPolyFromObject(data))
    }, '').trim();
  }

  const addPolyCoordinateData  = (shape) => {//poly
    shape = shape.toLowerCase()
    if(validateElements(shape).includes(false)){return} //at least one input is invalid - stop

    const sortedInputData = sortByAttributeOrder(inputData[shape])

    const polyData = createPolyFromObject(sortedInputData)
    setProcessedData((previous) => {
      const updatedProcessedData = { ...previous }
      updatedProcessedData.data.push(sortedInputData)
      return updatedProcessedData
    })

    setPoly((previousPoly) => {
      return `${previousPoly} ${polyData}`.trim()
    })

    setInputData((previousInputdata) => {
      const updatedInputData = { ...previousInputdata }
      delete updatedInputData[shape]
      return updatedInputData
      }
    )
  }

  const addPathCoordinateData = (command) => {//path
    if(validateElements(command).includes(false)){return} //at least one input is invalid - stop 
    if(!inputData[command]) {return}

    const flagVerifiedInput = verifyArcFlags(inputData[command], command)
    const sortedInputData = sortByAttributeOrder(flagVerifiedInput)

    let updatedInputData = [{[command]: sortedInputData}];

    // Check if 'M' needs to be added as the first command
    if (processedData?.data?.length === 0 && command !== 'M') { 
        updatedInputData.unshift({M:  { y: 0, x: 0 }})
      }

    const pathData = createPathFromArrayOfObjects(updatedInputData)

    setProcessedData((previous) => {
      const updatedProcessedData = { ...previous }
      updatedProcessedData?.data?.push(...updatedInputData)
      return updatedProcessedData
    });

    setPath((previousPath) => {
      return `${previousPath} ${pathData}`.trim()
    })

    setInputData((previousInputdata) => {
      const updatedInputData = { ...previousInputdata}
      delete updatedInputData[command]
      return updatedInputData
      }
    )
  }

  const handleCheckedChange = (event, flag, command) => {//path
    setInputData((previousInputData) => (
      {
        ...previousInputData,
        [command]: {
          ...previousInputData[command],
          [flag]: event.target.checked? 1 : 0
        }
      }
    ))
  }

  const handleAttributeChange = (event, parameter, command, shapeName) => {//path, poly, basic
    const shapeNameLower = shapeName.toLowerCase()
    const userInputValue = event.target.value
    if(advancedShapeConfig[shapeName]?.[0]?.eggs){
      if(userInputValue === '33611'){
        setDefaultShape(() => {
          return advancedShapeConfig[shapeName]?.[0]?.eggs?.AN
        })
      }
      if(userInputValue === '33626'){
        setDefaultShape(() => {
          return advancedShapeConfig[shapeName]?.[0]?.eggs?.MI
        })
      }
      if(userInputValue === '34639'){
        setDefaultShape(() => {
          return advancedShapeConfig[shapeName]?.[0]?.eggs?.BE
        })
      }
      if(userInputValue === '934639'){
        setDefaultShape(() => {
          return advancedShapeConfig[shapeName]?.[0]?.eggs?.RO
        })
      }
    }

    setInputData((previousInputData) => {
      let updatedInputData = { ...previousInputData}
      if(userInputValue === ''){
        delete updatedInputData[command || shapeNameLower]?.[parameter]
        if(Object.keys(updatedInputData[command || shapeNameLower]).length === 0){
          delete updatedInputData[command || shapeNameLower]
        }
      } else {
        updatedInputData[command || shapeNameLower] = {
          ...updatedInputData[command || shapeNameLower],
          [parameter]: Number(userInputValue)
        }
      }

     return updatedInputData
    })
  }

const removeHighlightedSpans = (currentSelectedSpans) => {//path, poly
  currentSelectedSpans.forEach((span) => {
    span.classList.toggle("bg-primary-subtle")
  })
}

  const handleAdvShapeDataEdit = (shape) => {//path, poly
    //first: check for highlight(selection) to toggle off - get out of edit mode
    const currentSelectedSpans = Array.from(document.getElementsByClassName("bg-primary-subtle")) //should only be one unless something has gone wrong
    if(currentSelectedSpans.length > 0){
      //there are selected spans - they need to be unselected
      removeHighlightedSpans(currentSelectedSpans)
      hideEditArrows()
      setInputData({}) //this is where I'd reload any saved inputdata from overwriting in loadDataIntoInputs
    } else { //go into edit mode
      //get spans
      const shapeDataSpans = Array.from(document.querySelectorAll("#shapeData > span"))
      //no spans if processedData is empty but I'd never get here if the edit button is hidden as is the case when processedData is empty
      const lastShapeDataSpan = shapeDataSpans[shapeDataSpans.length - 1]
      lastShapeDataSpan && lastShapeDataSpan.classList.toggle("bg-primary-subtle")
      showEditArrows(); //show arrows only if spans > 1?
      //load span data into inputs
      if(shape === 'path'){
        setInputData({
          ...processedData.data[lastShapeDataSpan.dataset.processeddataIndex]
        })
      }else{
        setInputData({
          [shape]: processedData.data[lastShapeDataSpan.dataset.processeddataIndex]
        })
      }
      //remove from processedData or edit 'in place'
      //to edit 'in place' I'd need to write a new function to move inputdata to processed or use the index via addPolyCoordinateData or addPathCoordinateData
      //I could write addPolyCoordinateData and addPathCoordinateData to find the first empty spot (or the end of the array)
      //I'll use the index and replace there
      }
  }

  const showEditArrows = ()=> {//path, poly
    const arrows = document.querySelectorAll("#shapeData > i");
    arrows.forEach(iElement => iElement.classList.replace("d-none", "d-inline"));
  }
  
  const hideEditArrows = () => {//path, poly
    const arrows = document.querySelectorAll("#shapeData > i");
    arrows.forEach(iElement => iElement.classList.replace("d-inline", "d-none"));
  }

  const getNextSpanIndex = (index, arrayLength) => {//path, poly
    if(arrayLength === 1) return -1
    if(index === 0) return index
    //as if index <= arrayLength - 1
    return index - 1
  }

  const handleAdvShapeProcessedDataDelete = (shape) => {//path, poly
    const processedDataIndex = Number(document.getElementsByClassName("bg-primary-subtle")[0]?.dataset.processeddataIndex)
    if(processedDataIndex === 0 && processedData.data.length > 1 && Object.keys(processedData.data[0])[0] === 'M'){ //don't delete that one; svg complains if it is missing
      //display a message to user?
      return
    }
    if(processedDataIndex >= 0){
      const nextSpanToHighlight = getNextSpanIndex(processedDataIndex, processedData.data.length)
      const removeData = processedData.data?.slice(processedDataIndex, processedDataIndex + 1)

      setProcessedData((previousProcessedData) => {
        const updatedProcessedData = { ...previousProcessedData }
        updatedProcessedData?.data?.splice(processedDataIndex, 1) //delete 1 item at index
        updatedProcessedData.meta["bg-primary-subtle"] = nextSpanToHighlight
        return updatedProcessedData
      })
      
      if(shape === 'path') {
        const removeFromPath = createPathFromArrayOfObjects(removeData)
        setPath((previous) => {
          const previousPath = previous.slice()
          const indexOfRemove = previousPath.indexOf(removeFromPath) //ensure not -1?
          const newPathP1 = previousPath.substring(0, indexOfRemove - 1)
          const newPathp2 = previousPath.substring(indexOfRemove + removeFromPath.length) //iOR + rFP valid?
          return newPathP1.concat(newPathp2)
        })
      }
      
      if(shape.includes('poly')){
        const removeFromPoly = createPolyFromArrayOfObjects(removeData)
        setPoly((previous) => {
          const previousPoly = previous.slice()
          const indexOfRemove = previousPoly.indexOf(removeFromPoly)
          const newPolyP1 = previousPoly.substring(0, indexOfRemove - 1)
          const newPolyp2 = previousPoly.substring(indexOfRemove + removeFromPoly.length)
          return newPolyP1.concat(newPolyp2)
        })
      }
      if(nextSpanToHighlight === -1){
        hideEditArrows();
      }
    }else{
      setProcessedData({data: [], meta: {"bg-primary-subtle": -1}})
      //setInputData({}) //clearing processed data should not empty inputdata - duh.
      setPath('')
      setPoly('')
      hideEditArrows();
    }
  }

  const handleEditCoordRight = (shape) => {  // path, poly  
    const processedDataIndex = Number(document.getElementsByClassName("bg-primary-subtle")[0]?.dataset.processeddataIndex)
    const shapeDataSpans = Array.from(document.querySelectorAll("#shapeData > span"))
    if (processedDataIndex < shapeDataSpans.length - 1){
      shapeDataSpans[processedDataIndex].classList.toggle("bg-primary-subtle")
      shapeDataSpans[processedDataIndex + 1].classList.toggle("bg-primary-subtle")
      //load span into inputs
      if(shape === 'path'){
        setInputData({
          ...processedData.data[processedDataIndex + 1]
        })
      }else{
        setInputData({
          [shape]: processedData.data[processedDataIndex + 1]
        })
      }
    }
  }

  const handleEditCoordLeft = (shape) => {// path, poly
    const processedDataIndex = Number(document.getElementsByClassName("bg-primary-subtle")[0]?.dataset.processeddataIndex)
    if (processedDataIndex >= 1){
      const shapeDataSpans = Array.from(document.querySelectorAll("#shapeData > span"))
      shapeDataSpans[processedDataIndex].classList.toggle("bg-primary-subtle")
      shapeDataSpans[processedDataIndex - 1].classList.toggle("bg-primary-subtle")
      //load span into inputs
      if(shape === 'path'){
        setInputData({
          ...processedData.data[processedDataIndex - 1]
        })
      }else{
        setInputData({
          [shape]: processedData.data[processedDataIndex - 1]
        })
      }
    }
  }
/* data-index={index} */
  const editDeleteIcons = processedData?.data?.length > 0
    ? <>
        {/* <div className='tooltip'> {/*https://www.w3schools.com/css/css_tooltip.asp */}
        {/*  <span className='tooltipText'>Edit</span> */}
        {/* todo: on mobile/small screens switch to buttons&text instead of the below icons ie: something larger/easier to hit */}
          <i className="bi bi-pencil-square" onClick={() => handleAdvShapeDataEdit(shape.toLowerCase())}></i>
        {/* </div> */}

        {/* <div className='tooltip'>*/}
        {/*  <span className='tooltipText'>Edit</span> */}
          <i className="bi bi-x-octagon" onClick={() => handleAdvShapeProcessedDataDelete(shape.toLowerCase())}></i>
        {/* </div> */}
      </>
    : <></>;

  const htmlForPath = (processedData) => {//path
    if(shape !== 'PATH'){return ''}
    if(processedData?.data?.length === 0){return ''}
    return processedData?.data?.map((object, index, array) => {
      const highlight = processedData.meta?.["bg-primary-subtle"] === index ? "bg-primary-subtle" : ''
      const keyCommand = Object.keys(object)[0]
      const values = Object.values(object[keyCommand] || {}).join(' ')
      const space = array.length - 1 === index ? '' : ' '
      return <span key={`${keyCommand}-${values}-${index}`} id={`${values} ${index}`}
                   className={highlight}
                   data-processeddata-index={index}>
                    {keyCommand} {values}{space}
            </span>
    })
  }

  const pathHTML = htmlForPath(processedData)

  const htmlForPoly = (processedData) => {//poly
    if(!shape.includes('POLY')){return ''}
    if(processedData?.data?.length === 0){return ''}
    return processedData?.data?.map((object, index, array) => {
      const highlight = processedData.meta?.["bg-primary-subtle"] === index ? "bg-primary-subtle" : ''
      const values = Object.values(object).join(', ')
      const space = array.length - 1 === index ? '' : ' '
      return <span key={`${values} ${index}`} id={`${values} ${index}`} 
                   className={highlight} 
                   data-processeddata-index={index}>
                    {values}{space}
            </span>
    })
  }

  const polyHTML = htmlForPoly(processedData)

  const handleRandomInput = (shapeName, command, parameters) => {//path, poly, basic
    const paramValues = parameters.reduce((params, object) => {
      params[object.parameter] = Math.floor(Math.random() * 379)
      return params
    }, {})
    
    setInputData((previousInputData) => {
      return {
        ...previousInputData,
        [command || shapeName]:  paramValues}
    })
  }

  const handleZCommand = () => {//path
    setProcessedData((previous) => {
      const updatedProcessedData = { ...previous }
      if(updatedProcessedData.data.length === 0) return updatedProcessedData
      updatedProcessedData.data.push({'Z': {}})
      return updatedProcessedData
    });

    setPath((previousPath) => {
      if(previousPath.length === 0) return previousPath
      return `${previousPath} Z`.trim()
    })
  }

  const findClosePathCoordinates = (processedData) => {//path
    return processedData?.data?.findLast((entry) => {
      const command = Object.keys(entry)[0]
      if(command === 'M') {
        return entry
      }
    })?.['M'] || {}
  }

  const closePathCoordinates = findClosePathCoordinates(processedData)
  const zCoords = Object.entries(closePathCoordinates).reduce((value, current, index, array) => {
    const separator = array.length - 1 === index ? '' : ', '
    return value.concat(current.join(': ').toUpperCase(), separator)
  }, '')

const basicShapeInputsWithRandom =<>
      {basicShapeConfig[shape]?.parameters?.map(({ parameter, label }, index) => 
        <div key={ parameter + "-" + index }>
          <label>{ label }
            <input type='number' min={ MIN } max={ MAX}  
                  required={ true } //could come from data
                  onChange={ event => handleAttributeChange(event, parameter, '', shape) }
                  value={ inputData[shape.toLowerCase()]?.[parameter] ?? '' }
                  placeholder={ `${MIN}-${MAX}` }
            />
          </label>
        </div>
      )}
      {basicShapeConfig[shape] && <button type='button' id={`${shape.toLowerCase()}-Random`} onClick={() => handleRandomInput(`${shape.charAt(0).toUpperCase()}${shape.slice(1).toLowerCase()}`, '', basicShapeConfig[shape].parameters)}>Random</button>}
    </>

  // DO: turn all below into components if/as able
  const advShapeInputs = advancedShapeConfig[shape]?.map(({ attribute, label, commands: pathCommands, parameters: polyParameters }, index) => {
    return (
      <div key={`${attribute} ${label} ${index}`}>
        <div>
          <section name={label} value={attribute}>
            <p id='shapeData'>
              {label}
              <br />
              {attribute}=
              <i className="d-none bi bi-box-arrow-in-left" onClick={() => handleEditCoordLeft(shape.toLowerCase())}></i>
              &apos;{pathHTML || polyHTML}&apos;
              <i className="d-none bi bi-box-arrow-in-right" onClick={() => handleEditCoordRight(shape.toLowerCase())}></i>
              {editDeleteIcons}
            </p>
          </section>
        </div>

        {pathCommands && //Path
          (
            <div>
              {/* { attribute, label, commands: pathCommands, parameters: polyParameters }, index*/}
              <div className="container" id={attribute + index} key={label + "-" + index}>
                {pathCommands.map(({command, name, parameters: pathParameters, flags}, index) => {
                    return (
                      <div className="card" key={command + "-" + name + "-" + index}>
                        <div className="card-header">
                          <h6>{name}</h6>
                        </div>
                        <div className="card-body" key={ `${shape}-${command}-${index}` }>
                        {pathParameters?.map(({ parameter, label}, index) => (
                          command === 'Z' ?
                          //input for command Z
                            <div key={ `${command}-${parameter}-${index}` }>
                              <label>{ label }
                                <span id={ `${parameter} ${command} ${shape}` }>: {closePathCoordinates?.[parameter] ?? 'Add another command first'}</span>
                              </label>
                            </div>
                          :
                          //input for commands M, L, H, V, C, S, Q, T AND A
                          <div key={ `${command}-${parameter}-${index}` }>
                              <label>{ label }
                                <input id={ `${parameter} ${command} ${shape}` } 
                                  min={ MIN } max={ MAX}
                                  type='number'  
                                  required={ false }
                                  onChange={ event => handleAttributeChange(event, parameter, command, shape) }
                                  value={ inputData[command]?.[parameter] ?? '' }
                                  placeholder={ `${MIN}-${MAX}` }
                                />
                              </label>
                            </div>
                        ))}
                        {flags?.map(({ flag, label }, index) =>{
                          return (
                            //input for A:FLAGS
                            <div key={ `${command}-${flag}-${index}` }>
                              <label >{label}
                                <input type='checkbox'
                                      id={ `${flag}-${command}` } //intentional: ID here uses dash instead of a space to avoid validateElements step
                                      onChange={ event => handleCheckedChange(event, flag, command) }
                                      checked={ inputData[command]?.[flag] ? true : false }
                                /> 
                              </label>
                            </div>
                          )}
                          )
                        }
                        </div>
                        <div className="card-footer">
                          {command !== 'Z' ? 
                          <div>
                            <button type='button' id='pathRandom' onClick={() => handleRandomInput(shape.toLowerCase(), command, pathParameters)}>Random</button>
                            <button type='button' id='commandsInput' onClick={() => addPathCoordinateData(command) }>Add {command} {inputData[command] ? Object.values(sortByAttributeOrder(verifyArcFlags(inputData[command] || {}, command))).join(", ") : ''}</button>
                          </div>
                          : 
                          <div>
                            <button type='button' id='Z-Command' onClick={() => handleZCommand()}>Add {command} </button> Returns to {zCoords}
                          </div>
                          }

                        </div>
                      </div>
                    )
                  })
                }
              </div>
            </div>
          )
        }
        {polyParameters && //Polyline/Polygon
          (
            <div>
              <fieldset name='parametersForCommand' id=''>
                {polyParameters.map(({ parameter, label }, index) => (
                  <div key={ `${shape}-${parameter}-${index}` }>
                    <label>{ label }
                      <input id={ `${parameter} ${shape} ${shape}` } 
                        min={ MIN } max={ MAX}
                        type='number'
                        onChange={ event => handleAttributeChange(event, parameter, '', shape) }
                        value={ inputData[shape.toLowerCase()]?.[parameter] ?? '' }
                        placeholder={ `${MIN}-${MAX}` }
                      />
                    </label>
                    {`min ${MIN} - max ${MAX}`}
                  </div>
                ))}
                <button type='button' id='polyRandom' onClick={() => handleRandomInput(shape.toLowerCase(), '', polyParameters)}>Random</button>
                <button type='button' id='parametersInput' onClick={() => addPolyCoordinateData(shape)}>Add Coordinate {Object.values(inputData[shape.toLowerCase()] || {}).join(", ")}</button>
              </fieldset>
            </div>
          )
        }
      </div>
    )
  }
  );

  if (!basicShapeConfig[shape] && !advancedShapeConfig[shape]) {
    return null
  };

  return <>
    {basicShapeInputsWithRandom}
    {advShapeInputs}
  </>;
};

ShapeInputs.propTypes = {
  shape: PropTypes.string,
};

export default ShapeInputs;

